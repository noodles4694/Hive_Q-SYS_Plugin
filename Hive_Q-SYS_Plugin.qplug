-- Information block for the plugin
PluginInfo = {
  Name = "Hive~Beeblade",
  Version = "0.0",
  BuildVersion = "0.0.0.8",
  Id = "c88de492-bccb-49bb-9927-852367b9eb16",
  Author = "Carrier Labs & Hive",
  Description = "Plugin to control Hive Beeblade, Beebox and Nexus devices" ,
  ShowDebug = true 
}
local udp_port = 8083
local layer_count = 2
local max_media_items = 120

local Colors = {
  hive_yellow = {255, 215, 0},
  hive_grey = {56, 56, 59},
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  transparent = {0, 0, 0, 0},
  control_label = {0, 0, 0}
}

local control_list = {
  ["File Select"] = {
    Name = "file_select_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Time Elapsed"] = {
    Name = "time_elapsed_",
    ControlType = "Indicator",
    IndicatorType = "Text",
    PinStyle = "Output",
    UserPin = true
  },
  ["Duration"] = {
    Name = "duration_",
    ControlType = "Indicator",
    IndicatorType = "Text",
    PinStyle = "Output",
    UserPin = true
  },
  ["Seek"] = {
    Name = "seek_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Fader",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Intensity"] = {
    Name = "intensity_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["In Frame"] = {
    Name = "in_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 9999999,
    PinStyle = "Both",
    UserPin = true
  },
  ["Out Frame"] = {
    Name = "out_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 9999999,
    PinStyle = "Both",
    UserPin = true
  },
  ["Play Mode"] = {
    Name = "play_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Framing Mode"] = {
    Name = "framing_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Blend Mode"] = {
    Name = "blend_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  --[[["LUT Select"] = {
    Name = "lut_select_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },]]
  ["Play Speed"] = {
    Name = "play_speed_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 1000,
    PinStyle = "Both",
    UserPin = true
  },
  ["Move Speed"] = {
    Name = "move_speed_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Hour"] = {
    Name = "mtc_hour_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 23,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Minute"] = {
    Name = "mtc_minute_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Second"] = {
    Name = "mtc_second_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Frame"] = {
    Name = "mtc_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["Scale"] = {
    Name = "scale_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 1000,
    PinStyle = "Both",
    UserPin = true
  },
  ["Aspect Ratio"] = {
    Name = "aspect_ratio_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Position X"] = {
    Name = "position_x_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Position Y"] = {
    Name = "position_y_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation X"] = {
    Name = "rotation_x_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation Y"] = {
    Name = "rotation_y_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation Z"] = {
    Name = "rotation_z_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Red"] = {
    Name = "red_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Green"] = {
    Name = "green_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Blue"] = {
    Name = "blue_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Hue"] = {
    Name = "hue_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Saturation"] = {
    Name = "saturation_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Contrast"] = {
    Name = "contrast_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Strobe"] = {
    Name = "strobe_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Volume"] = {
    Name = "volume_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  }
}

--[[ 
local parameter_list = {} -- this results in random order indexing
for k,v in pairs(control_list) do
  table.insert(parameter_list, k)
end
]]
local parameter_list = {
  "File Select",
  "Time Elapsed",
  "Duration",
  "Seek",
  "Intensity",
  "In Frame",
  "Out Frame",
  "Play Mode",
  "Framing Mode",
  "Blend Mode",
  --"LUT Select",
  "Play Speed",
  "Move Speed",
  "MTC Hour",
  "MTC Minute",
  "MTC Second",
  "MTC Frame",
  "Scale",
  "Aspect Ratio",
  "Position X",
  "Position Y",
  "Rotation X",
  "Rotation Y",
  "Rotation Z",
  "Red",
  "Green",
  "Blue",
  "Hue",
  "Saturation",
  "Contrast",
  "Strobe",
  "Volume"
}
-- Define the color of the plugin object in the design
function GetColor(props)
  return {102, 102, 102}
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Hive " .. props["Model"].Value .. " " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = {"Setup", "Media List"}
function GetPages(props)
  local pages = {}
  
  for i=1, layer_count do
    --table.insert(PageNames, "Layer " .. i .. " Parameters")
  end
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Player_3" } )
  end
  return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(
    props,
    {
      Name = "IP Address",
      Type = "string",
      Value = "192.168.1.30"
    }
  )
  
  table.insert(
    props,
    {
      Name = "Model",
      Type = "enum",
      Choices = {"PLAYER_1", "PLAYER_2", "PLAYER_3", "PLAYER_4"},
      Value = "PLAYER_3"
    }
  )
  
  table.insert(
    props,
    {
      Name = "Media List Count",
      Type = "integer",
      Value = 10,
      Min = 1,
      Max = 120
    }
  )
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  -- No Pins!
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  print("Rectify Properties Called ")
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  -- No components!
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  -- No Wiring!
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(
    ctrls,
    {
      Name = "online",
      ControlType = "Indicator",
      IndicatorType = "Led",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ip_address",
      ControlType = "Text",
      --IndicatorType = "Text",
      PinStyle = "Both",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "device_name",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "thumbnail",
      ControlType = "Button",
      ButtonType = "Momentary",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "test",
      ControlType = "Button",
      ButtonType = "Momentary",
      PinStyle = "Input",
      Count = 1,
      UserPin = true
    }
  )
  
  for i = 1, layer_count do
    for k, v in pairs(control_list) do
      table.insert(
        ctrls,
        {
          Name = v.Name .. i,
          ControlType = v.ControlType,
          ControlUnit = v.ControlUnit,
          Min = v.Min,
          Max = v.Max,
          PinStyle = v.PinStyle,
          UserPin = v.UserPin
        }
      )
    end
    for p = 1, max_media_items do
      table.insert(
        ctrls,
        {
          Name = string.format("media_name_%s_layer_%s", p, i),
          ControlType = "Indicator",
          IndicatorType = "Text",
          PinStyle = "Output",
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = string.format("media_thumbnail_%s_layer_%s", p, i),
          ControlType = "Button",
          ButtonType = "StateTrigger",
          Min = 0,
          Max = 1,
          PinStyle = "None",
          UserPin = false
        }
      )
    end
  end
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  local media_item_count = props["Media List Count"].Value
  
  local column_size = 11
  
  local btn_size = {32, 24}
  local status_groupbox_size = {9 * btn_size[1], 4 * btn_size[2]}
  local player_groupbox_position = {0, status_groupbox_size[2] + (0.5 * btn_size[2])}
  local player_groupbox_size = {
    (((math.floor((#parameter_list / column_size)) + 1) * 6) + 1) * btn_size[1],
    (column_size + 2) * btn_size[2]
  }
  local preview_size = {3 * btn_size[1], (3 * btn_size[1])}
  local media_list_groupbox_size = {3 * preview_size[1], (media_item_count + 1) * preview_size[2]}
  
  if CurrentPage then
    if CurrentPage == "Setup" then
      table.insert(
        graphics,
        {
          Type = "GroupBox",
          Text = "Setup",
          HTextAlign = "Left",
          CornerRadius = 8,
          Fill = Colors.hive_grey,
          StrokeWidth = 1,
          Position = {0, 0},
          Size = status_groupbox_size
        }
      )
      --[[table.insert(
        graphics,
        {
          Type = "Jpeg",
          Image = "images/logo.jpg", -- TODO
          Position = {21, 34},
          Size = {115, 36}
        }
      )]]
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = "Online:",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Bold",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {0, (0.5 * btn_size[2])},
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = "IP Address:",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Bold",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {0, (1.5 * btn_size[2])},
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = "Device Name:",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Bold",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {0, (2.5 * btn_size[2])},
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      layout["online"] = {
        PrettyName = "System~Online",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {3 * btn_size[1], (0.5 * btn_size[2])},
        Size = {btn_size[2], btn_size[2]}
      }
      layout["ip_address"] = {
        PrettyName = "System~IP Address",
        Style = "TextBox",
        Position = {3 * btn_size[1], (1.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
      layout["device_name"] = {
        PrettyName = "System~Device Name",
        Style = "TextBox",
        Position = {3 * btn_size[1], (2.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
      layout["test"] = {
        PrettyName = "Test",
        Style = "Button",
        Position = {7 * btn_size[1], (2.5 * btn_size[2])},
        Size = {1 * btn_size[1], btn_size[2]}
      }
  
      for i = 1, layer_count do
        table.insert(
          graphics,
          {
            Type = "GroupBox",
            Text = "Layer " .. i,
            HTextAlign = "Left",
            CornerRadius = 8,
            Fill = Colors.hive_grey,
            StrokeWidth = 1,
            Position = {
              player_groupbox_position[1],
              player_groupbox_position[2] + ((i - 1) * (player_groupbox_size[2] + (0.5 * btn_size[2])))
            },
            Size = player_groupbox_size
          }
        )
        for k, v in pairs(parameter_list) do
          local column = math.floor((k - 1) / column_size) + 1
          local row = k - (column - 1) * column_size
          table.insert(
            graphics,
            {
              Type = "Text",
              Text = v .. ":",
              Font = "Roboto",
              FontSize = 12,
              FontStyle = "Bold",
              HTextAlign = "Right",
              Color = Colors.hive_yellow,
              Position = {
                player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)),
                player_groupbox_position[2] +
                  ((i - 1) * (player_groupbox_size[2] + (0.5 * btn_size[2])) + (row * btn_size[2]))
              },
              Size = {3 * btn_size[1], btn_size[2]}
            }
          )
          layout[control_list[v].Name .. i] = {
            PrettyName = "Layer " .. i .. "~" .. v,
            Style = control_list[v].Style,
            Position = {
              player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)) + (3 * btn_size[1]),
              player_groupbox_position[2] +
                ((i - 1) * (player_groupbox_size[2] + (0.5 * btn_size[2])) + (row * btn_size[2]))
            },
            Size = {3 * btn_size[1], btn_size[2]}
          }
        end
      end
    elseif CurrentPage == "Media List" then
      table.insert(
        graphics,
        {
          Type = "GroupBox",
          Text = "Media List",
          HTextAlign = "Left",
          CornerRadius = 8,
          Fill = Colors.hive_grey,
          StrokeWidth = 1,
          Position = {0, 0},
          Size = media_list_groupbox_size
        }
      )
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = "File Name",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Bold",
          HTextAlign = "Right",
          Color = Colors.hive_yellow,
          Position = {0, (1 * btn_size[2])},
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
  
      for i = 1, layer_count do
        table.insert(
          graphics,
          {
            Type = "Text",
            Text = string.format("Layer %s\nClip Select", i),
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Centre",
            Color = Colors.hive_yellow,
            Position = {i * 3 * btn_size[1], (1 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
          }
        )
        for p = 1, media_item_count do
          layout[string.format("media_name_%s_layer_%s", p, i)] = {
            PrettyName = string.format("Layer %s~Media List~%s~Name", i, p),
            Style = "TextBox",
            Position = {
              0 * btn_size[1],
              (2 * btn_size[2]) + ((p - 1) * preview_size[2]) + (preview_size[2] / 2) - (btn_size[2] / 2)
            },
            Size = {3 * btn_size[1], btn_size[2]}
          }
          layout[string.format("media_thumbnail_%s_layer_%s", p, i)] = {
            PrettyName = string.format("Layer %s~Media List~%s~Select", i, p),
            UnlinkOffColor = true,
            OffColor = Colors.transparent,
            Color = Colors.hive_yellow,
            StrokeColor = Colors.hive_yellow,
            Position = {i * 3 * btn_size[1], (2 * btn_size[2]) + ((p - 1) * preview_size[2])},
            Size = preview_size
          }
        end
      end
    --elseif string.find(CurrentPage, "Layer (%d+) Parameters") then
    --i = string.match(CurrentPage, "Layer (%d+) Parameters")
    end
  end
  return layout, graphics
end

--Start event based logic
if Controls then
local file_list = {}
local selected_file = {}
local file_metadata_list = {}

local play_mode = {}
local seek_timer_list = {}
local seek_last_value = {}

for i = 1, layer_count do
  play_mode[i] = "In Frame"
  selected_file[i] = ""
  saved_play_mode = {}
  seek_timer_list[i] = Timer.New()
end

local media_item_count = Properties["Media List Count"].Value

local play_mode_list = {
  ["In Frame"] = 0,
  ["Out Frame"] = 1,
  ["Loop Forward"] = 2,
  ["Loop Reverse"] = 3,
  ["Play Once Forward"] = 4,
  ["Play Once Reverse"] = 5,
  ["Stop"] = 6,
  ["Pause"] = 7,
  ["Bounce (Ping-Pong)"] = 8,
  ["Take Over Frame"] = 9,
  ["Loop Forward with pause on zero intensity"] = 10,
  ["Loop Reverse with pause on zero intensity"] = 11,
  ["Play Once Forward with pause on zero intensity"] = 12,
  ["Play Once Reverse with pause on zero intensity"] = 13,
  ["Bounce (Ping-Pong) with pause on zero intensity"] = 15,
  ["Synchronise to Time code"] = 20,
  ["Loop Forward with re-trigger on intensity"] = 40,
  ["Loop Reverse with re-trigger on intensity"] = 41,
  ["Play Once Forward with re-trigger on intensity"] = 42,
  ["Play Once Reverse with re-trigger on intensity"] = 43
}

local play_mode_choices = {}
for k, v in pairs(play_mode_list) do
  table.insert(play_mode_choices, k)
end

local framing_mode_list = {
  ["Letterbox"] = 0,
  ["Crop"] = 1,
  ["Stretch"] = 2,
  ["Multi Letterbox"] = 3,
  ["Centered"] = 4
}

local framing_mode_choices = {}
for k, v in pairs(framing_mode_list) do
  table.insert(framing_mode_choices, k)
end

local blend_mode_list = {
  ["Alpha"] = 0,
  ["Additive"] = 1,
  ["Multiply"] = 2,
  ["Difference"] = 3,
  ["Screen"] = 4,
  ["Preserve Luma"] = 5
}

local blend_mode_choices = {}
for k, v in pairs(blend_mode_list) do
  table.insert(blend_mode_choices, k)
end

local fx_list = {
  ["NONE"] = 0,
  ["OLD TV"] = 1,
  ["SEPIA"] = 2,
  ["FEEDBACK"] = 3,
  ["BLUR"] = 4,
  ["CRYSTALISE"] = 5,
  ["FRACTAL SOUP"] = 6,
  ["RADAR"] = 7,
  ["PIXELISE"] = 8,
  ["SOFT EDGE OVAL"] = 9,
  ["TILE"] = 10,
  ["INFINITY ZOOM"] = 11,
  ["DOT GRID"] = 12,
  ["KALEIDOSCOPE"] = 13,
  ["MULTI MIRROR"] = 14,
  ["REBELLE DISTORT"] = 15
}

local fx_choices = {}
for k, v in pairs(fx_list) do
  table.insert(fx_choices, k)
end

ticker = 1
poll_parameter_list = {}
for _, v in pairs(parameter_list) do
  if v ~= "Time Elapsed" and v ~= "Duration" and v ~= "Seek" then
    table.insert(poll_parameter_list, v:upper())
  end
end

local ip_address = Properties["IP Address"].Value
local udp_command_base_string_set = 'localSVPatch.SetPatchDouble("/LAYER '
local udp_command_base_string_get = 'GetPatchDoubleWithDescriptor("/LAYER '
--local udp_command_base_string_get = 'WatchPatchDouble("/LAYER '
rapidjson = require("rapidjson")

ws = WebSocket.New()
local wsConnected = false
local sequenceNo = 0
local pendingCallbacks = {}
local refreshViewMap = {}
local handlers = {}
local connectionCallback = nil
local pingTimer = Timer.New()
local ipTarget = nil
local shouldConnect = false
local dataBuffer = "" -- Buffer to hold incoming data

function Connect(ip, statusCallback)
  connectionCallback = statusCallback
  shouldConnect = true
  ipTarget = ip
  if (ipTarget) then
    print("Connecting to Hive WebSocket at " .. ipTarget)
    connectSocket(ipTarget)
  else
    print("No IP address provided for WebSocket connection.")
  end
end

function Disconnect()
  shouldConnect = false
  ws:Close()
  wsConnected = false
  print("WebSocket connection closed")
  if connectionCallback then
    connectionCallback(false) -- Call the status callback with false to indicate disconnection
  end
  pingTimer:Stop()
end

-- WebSocket event handlers
ws.Connected = function()
  wsConnected = true
  print("WebSocket connection established")
  if connectionCallback then
    connectionCallback(true) -- Call the status callback with true to indicate success
  end
  -- send ping every 10 seconds to keep connection alive
  pingTimer:Start(10)
end

ws.Closed = function()
  wsConnected = false
  print("WebSocket connection closed")
  if connectionCallback then
    connectionCallback(false) -- Call the status callback with false to indicate disconnection
  end
  pingTimer:Stop()
  if shouldConnect then
    if ipTarget then
      connectSocket(ipTarget) -- Attempt to reconnect
    else
      print("No IP address provided for reconnection.")
    end
  end
end

ws.Data = function(ws, data)
  -- Check if the data is a complete message or part of a larger message
  if (string.len(data) == 16384) then
    dataBuffer = dataBuffer .. data
  else
    -- data is complete, let's process it
    dataBuffer = dataBuffer .. data
    local response = rapidjson.decode(dataBuffer)
    local callback = nil
    -- check if we have a local handler that matches the response name
    if response and response.apiVersion == 1 and response.name and handlers[response.name] then
      -- check if we have a defined handler for this data
      callback = handlers[response.name]
      if callback then
        -- Call the handler with the response data
        callback(response.ret)
      end
    elseif response and response.apiVersion == 1 and response.sequence and pendingCallbacks[response.sequence] then
      callback = pendingCallbacks[response.sequence]
      if callback then
        -- Call the callback with the response data
        callback(response.args.Path, response.ret.Value)
        -- remove the callback from pendingCallbacks after it's called
        pendingCallbacks[response.sequence] = nil
      end
    else
      print("No callback / handler found for data: ")
    end
    dataBuffer = "" -- Clear the buffer after processing
  end
end

ws.Error = function(socket, err)
  print("Hive WebSocket error: " .. err)
  pingTimer:Stop()
  -- Attempt to reconnect if the connection is lost
  if wsConnected == false and shouldConnect == true then
    if ipTarget then
      connectSocket(ipTarget) -- Attempt to reconnect
    end
  end
end

-- Timer to send ping messages to keep the WebSocket connection alive
pingTimer.EventHandler = function()
  ws:Ping()
end

function connectSocket(ip)
  -- Check if the WebSocket is already connected
  if (wsConnected) then
    print("WebSocket is already connected.")
    ws:Close()
  end
  -- Connect to the Hive WebSocket server
  ws:Connect("ws", ip, "", 9002)
end

function refreshView(refreshViewMessage)
  local callback = refreshViewMap[refreshViewMessage.Path]
  if callback then
    callback(refreshViewMessage.Path, refreshViewMessage.Value)
  else
    print("No callback found for refresh view message: " .. refreshViewMessage)
  end
end

handlers["RefreshView"] = refreshView

function _RemoveWatch(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_RemoveWatch",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function removeWatch(path)
  if path then
    refreshViewMap[path] = nil
    _RemoveWatch(path)
    print("Removed watch for path: " .. path)
  end
end

function getPatchDouble(path, callback)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchDouble",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    pendingCallbacks[sequenceNo] = callback
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function setPatchDouble(path, value)
  
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchDouble",
      args = {Path = path, Value = value}
    }
    print("Setting patch double for path: " .. path .. " with value: " .. tostring(value))
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function _WatchPatchDouble(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchDouble",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function watchPatchDouble(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchDouble(path)
  getPatchDouble(path, callback)
end

function getPatchString(path, callback)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchString",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    pendingCallbacks[sequenceNo] = callback
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function setPatchString(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchString",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function _WatchPatchString(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchString",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function watchPatchString(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchString(path)
  getPatchString(path, callback)
end

function getPatchJSON(path, callback)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchJSON",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    pendingCallbacks[sequenceNo] = callback
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function setPatchJSON(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "UpdatePatchJSON",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function updatePatchJSON(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchJSON",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function _WatchPatchJSON(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchJSON",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function watchPatchJSON(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchJSON(path)
  getPatchJSON(path, callback)
end

-- Handler for double values received from the patch
function doubleHandler(path, val)
  print("Double value received for " .. path .. ": " .. val)
  -- Handle the double value received from the patch
  -- You can update controls or perform other actions here
end

-- Handler for string values received from the patch
function stringHandler(path, val)
  print("Double value received for " .. path .. ": " .. val)
  -- Handle the s tring value received from the patch
  -- You can update controls or perform other actions here
end

-- Handler for JSON values received from the patch
function jsonHandler(path, val)
  print("JSON value received for " .. path .. ": " .. rapidjson.encode(val))
  -- Handle the JSON value received from the patch
  -- You can update controls or perform other actions here
end
-- Set up UDP Port
local udp = UdpSocket.New()

---checks if a string represents an ip address
function isIpAddress(ip)
  if not ip then
    return false
  end
  local a, b, c, d = ip:match("^(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)$")
  a = tonumber(a)
  b = tonumber(b)
  c = tonumber(c)
  d = tonumber(d)
  if not a or not b or not c or not d then
    return false
  end
  if a < 0 or 255 < a then
    return false
  end
  if b < 0 or 255 < b then
    return false
  end
  if c < 0 or 255 < c then
    return false
  end
  if d < 0 or 255 < d then
    return false
  end
  return true
end

function fnPoll()
  cmd_read_system_settings()
  fn_poll_parameters()
  --Timer.CallAfter(cmd_read_media_list, 1)
  --Timer.CallAfter(cmd_read_play_list, 2)
  --Timer.CallAfter(cmd_read_timecode_cue_list, 3)
  --Timer.CallAfter(cmd_read_output_mapping, 4)
  -- Timer.CallAfter(fnPoll, 0.2)
end

function fn_hive_connect_Status(status)
  if status == true then
    print("Connected to Hive player at " .. ip_address)
    Controls.online.Boolean = false
    fn_watch_parameters()
  else
    print("Failed to connect to Hive player at " .. ip_address)
    Controls.online.Boolean = false
  end
end

function fn_watch_parameters()
  -- Watch for JSON updates
  watchPatchJSON("/System Settings", processJSONUpdate)
  watchPatchJSON("/Media List", processJSONUpdate)
  -- Watch for value changes in layer parameters
  for i = 1, layer_count do
    for _, parameter in ipairs(poll_parameter_list) do
      local path = string.format("/LAYER %s/%s/Value", i, parameter)
      watchPatchDouble(path, processDoubleUpdate)
    end
  end
  -- Watch for value changes in transport control parameters
  for i = 1, layer_count do
    watchPatchDouble(string.format("/LAYER %s/Transport Control/Media Time/Value", i), processDoubleUpdate)
  end
end

function fn_poll_parameters()
  for i = 1, layer_count do
    fn_get(i, poll_parameter_list[ticker])
  end
  if ticker > #poll_parameter_list - 1 then
    ticker = 1
    cmd_read_media_list()
  else
    ticker = ticker + 1
  end
end

function fn_poll_transport()
  for i = 1, layer_count do
    fn_get(i, "Transport Control/Media Time")
  end
  -- Timer.CallAfter(fn_poll_transport, 1)
end

function noResponse()
  Controls.online.Boolean = false
end

function still_alive()
  Controls.online.Boolean = true
  feedbackChecker:Stop()
  feedbackChecker:Start(11)
end

feedbackChecker = Timer.New()
feedbackChecker.EventHandler = noResponse

function fn_send(layer, cmd, val)
  local path = "/LAYER " .. layer .. "/" .. cmd .. "/Value" -- please make this neater with string.format()
  --print(send_string)
  -- udp:Send(ip_address, udp_port, send_string)
  setPatchDouble(path, val)
end

function fn_get(layer, cmd)
  local send_string = udp_command_base_string_get .. layer .. "/" .. cmd .. '/Value", UDPMsgReturn)' -- please make this neater with string.format()
  --print(send_string)
  udp:Send(ip_address, udp_port, send_string)
end

function fn_read_json_command(cmd, val)
  local send_string = 'GetPatchJSONWithDescriptor("/' .. cmd .. '", ' .. val .. ")"
  --local send_string = 'WatchPatchJSONWithDescriptor("/' .. cmd .. '", ' .. val .. ")"

  --print(send_string)
  udp:Send(ip_address, udp_port, send_string)
end

function fn_send_json(cmd, val)
  local encoded_val = json.encode(val)
  local send_string = 'localSVPatch.UpdatePatchJSON("/' .. cmd .. '", ' .. encoded_val .. ")"
  --print(send_string)
  udp:Send(ip_address, udp_port, send_string)
end

function processDoubleUpdate(path, value)
  if path:sub(1, 6) == "/LAYER" then -- Layer parameter response
    local layer, parameter = path:match("/LAYER (%d+)/(%P+)/Value")
    if parameter then
      local control = string.format("%s_%s", parameter:gsub("%s", "_"):lower(), layer)
      if parameter == "FILE SELECT" then
        for k, v in pairs(file_list) do
          if v == value then
            Controls[control].String = k
            Controls["duration_" .. control:sub(-1, -1)].String =
              os.date("!%X", math.floor(file_metadata_list[k].duration))
            for media = 1, media_item_count do
              Controls[string.format("media_thumbnail_%s_layer_%s", media, layer)].Boolean =
                Controls[control].String == Controls[string.format("media_name_%s_layer_%s", media, layer)].String
            end
            break
          end
        end
      elseif parameter:sub(-5, -1) == "FRAME" then
        Controls[control].Value = value
      elseif parameter == "PLAY MODE" then
        for k, v in pairs(play_mode_list) do
          if v == value then
            Controls[control].String = k
            break
          end
        end
      elseif parameter == "FRAMING MODE" then
        for k, v in pairs(framing_mode_list) do
          if v == value then
            Controls[control].String = k
            break
          end
        end
      elseif parameter == "BLEND MODE" then
        for k, v in pairs(blend_mode_list) do
          if v == value then
            Controls[control].String = k
            break
          end
        end
      elseif parameter == "PLAY SPEED" or parameter == "SCALE" then
        if value >= 0.5 then
          Controls[control].Position = (value - 0.4444444444444444) / 0.5555555555555556
        else
          Controls[control].Position = value / 5
        end
      elseif parameter:sub(1, 3) == "MTC" then
        Controls[control].Value = value
      elseif parameter:sub(1, 8) == "POSITION" then
        Controls[control].Value = (value * 200) - 100
      elseif parameter:sub(1, 8) == "ROTATION" then
        Controls[control].Value = (value * 2880) - 1440
      elseif
        parameter == "RED" or parameter == "BLUE" or parameter == "GREEN" or parameter == "SATURATION" or
          parameter == "CONTRAST"
       then
        Controls[control].Value = (value * 200) - 100
      else -- parameters where data directly proportional to position
        Controls[control].Position = value
      end
    else
      local layer, parameter = path:match("/LAYER (%d+)/(%P+)")
      if parameter == "Transport Control" then
        local layer, parameter, sub_parameter = path:match("/LAYER (%d+)/(%P+)/(%P+)")
        if sub_parameter == "Media Time" then
          if Controls["file_select_" .. layer].String ~= "" and not seek_timer_list[tonumber(layer)]:IsRunning() then
            local pos = tonumber(value) / file_metadata_list[Controls["file_select_" .. layer].String].duration
            Controls["seek_" .. layer].Position = pos
            Controls["time_elapsed_" .. layer].String = os.date("!%X", math.floor(value))
          end
        end
      end
    end
  end
end

function processJSONUpdate(path, value)
  print("Processing JSON update for path: " .. path)
  if path == "/System Settings" then
    Controls.ip_address.String = value.ipAddress
    Controls.device_name.String = value.deviceName
  elseif path == "/Media List" then
    local file_choice_list = {}
    for _, file in ipairs(value.files) do
      file_list[file.name] = file.fileIndex - 1
      table.insert(file_choice_list, file.name)
      file_metadata_list[file.name] = file
      for i = 1, layer_count do
        if Controls[string.format("media_name_%s_layer_%s", file.fileIndex, i)] then
          Controls[string.format("media_name_%s_layer_%s", file.fileIndex, i)].String = file.name
        end
      end
      get_file_thumbnail(file.fileIndex, file.name)
    end
    for i = 1, layer_count do
      Controls["file_select_" .. i].Choices = file_choice_list
    end
  elseif path == "/Output Mapping" then
  elseif path == "/Play List" then
  elseif path == "/Timecode Cue List" then
  elseif path == "/Vioso WB Settings" then
  elseif path == "/Screenberry WB Settings" then
  end
end

udp.Data = function(udp, packet)
  still_alive()
  --print("BUZZ!", packet.Data, rapidjson.decode(packet.Data))
  if rapidjson.decode(packet.Data) ~= nil then
    local response = rapidjson.decode(packet.Data)
    local data = rapidjson.decode(response.data)
    --print(response.descriptor)
    if response.descriptor == "/System Settings" then
      Controls.ip_address.String = data.ipAddress
      Controls.device_name.String = data.deviceName
    elseif response.descriptor == "/Media List" then
      local file_choice_list = {}
      for _, file in ipairs(data.files) do
        file_list[file.name] = file.fileIndex - 1
        table.insert(file_choice_list, file.name)
        file_metadata_list[file.name] = file
        for i = 1, layer_count do
          if Controls[string.format("media_name_%s_layer_%s", file.fileIndex, i)] then
            Controls[string.format("media_name_%s_layer_%s", file.fileIndex, i)].String = file.name
          end
        end
        get_file_thumbnail(file.fileIndex, file.name)
      end
      for i = 1, layer_count do
        Controls["file_select_" .. i].Choices = file_choice_list
      end
    elseif response.descriptor == "/Output Mapping" then
    elseif response.descriptor == "/Play List" then
      for _, layer in ipairs(response.layers) do
        --print(layer.label)
      end
    elseif response.descriptor == "/Timecode Cue List" then
    elseif response.descriptor == "/Vioso WB Settings" then
    elseif response.descriptor == "/Screenberry WB Settings" then
    elseif response.descriptor:sub(1, 6) == "/LAYER" then -- Layer parameter response
      --[[if response.descriptor:match("/LAYER (%d+)/(%P+)") then
        print("yoo", response.descriptor, data)
      else]]
      local layer, parameter = response.descriptor:match("/LAYER (%d+)/(%P+)/Value")
      if parameter then
        local control = string.format("%s_%s", parameter:gsub("%s", "_"):lower(), layer)
        if parameter == "FILE SELECT" then
          for k, v in pairs(file_list) do
            if v == data then
              Controls[control].String = k
              Controls["duration_" .. control:sub(-1, -1)].String =
                os.date("!%X", math.floor(file_metadata_list[k].duration))
              for media = 1, media_item_count do
                Controls[string.format("media_thumbnail_%s_layer_%s", media, layer)].Boolean =
                  Controls[control].String == Controls[string.format("media_name_%s_layer_%s", media, layer)].String
              end
              break
            end
          end
        elseif parameter:sub(-5, -1) == "FRAME" then
          Controls[control].Value = data
        elseif parameter == "PLAY MODE" then
          for k, v in pairs(play_mode_list) do
            if v == data then
              Controls[control].String = k
              break
            end
          end
        elseif parameter == "FRAMING MODE" then
          for k, v in pairs(framing_mode_list) do
            if v == data then
              Controls[control].String = k
              break
            end
          end
        elseif parameter == "BLEND MODE" then
          for k, v in pairs(blend_mode_list) do
            if v == data then
              Controls[control].String = k
              break
            end
          end
        elseif parameter == "PLAY SPEED" or parameter == "SCALE" then
          if data >= 0.5 then
            Controls[control].Position = (data - 0.4444444444444444) / 0.5555555555555556
          else
            Controls[control].Position = data / 5
          end
        elseif parameter:sub(1, 3) == "MTC" then
          Controls[control].Value = data
        elseif parameter:sub(1, 8) == "POSITION" then
          Controls[control].Value = (data * 200) - 100
        elseif parameter:sub(1, 8) == "ROTATION" then
          Controls[control].Value = (data * 2880) - 1440
        elseif
          parameter == "RED" or parameter == "BLUE" or parameter == "GREEN" or parameter == "SATURATION" or
            parameter == "CONTRAST"
         then
          Controls[control].Value = (data * 200) - 100
        else -- parameters where data directly proportional to position
          Controls[control].Position = data
        end
      else
        local layer, parameter = response.descriptor:match("/LAYER (%d+)/(%P+)")
        if parameter == "Transport Control" then
          local layer, parameter, sub_parameter = response.descriptor:match("/LAYER (%d+)/(%P+)/(%P+)")
          print("Transport Control feedback received!", data)
          print(string.format("Layer: %s, parameter: %s, sub-parameter: %s", layer, parameter, sub_parameter))
          if sub_parameter == "Media Time" then
            print(
              "Check processing criteria:",
              Controls["file_select_" .. layer].String ~= "",
              not seek_timer_list[tonumber(layer)]:IsRunning()
            )
            if Controls["file_select_" .. layer].String ~= "" and not seek_timer_list[tonumber(layer)]:IsRunning() then
              local pos = tonumber(data) / file_metadata_list[Controls["file_select_" .. layer].String].duration
              print(
                string.format(
                  "Statement triggered, calcuated position is %s and formatted date is %s",
                  pos,
                  os.date("!%X", math.floor(data))
                )
              )
              Controls["seek_" .. layer].Position = pos
              Controls["time_elapsed_" .. layer].String = os.date("!%X", math.floor(data))
            else
              print(
                string.format(
                  "Feedback processing did not trigger. File was %s and seek timer running status was %s",
                  Controls["file_select_" .. layer].String,
                  seek_timer_list[tonumber(layer)]:IsRunning()
                )
              )
            end
          end
        end
      end
    end
  end
end

--[[
function get_live_preview()
  HttpClient.Download {
    Url = string.format("http://%s/Honey/status.txt", ip_address),
    Headers = {},
    Auth = "basic",
    Timeout = 10,
    EventHandler = function(table, code, data, err, headers)
      print(string.format("http://%s/Honey/outputFrame_%s.jpg", ip_address, data))
      HttpClient.Download {
        Url = string.format("http://%s/Honey/outputFrame_%s.jpg", ip_address, data),
        Headers = {},
        Auth = "basic",
        Timeout = 10,
        EventHandler = function(table, code, data, err, headers)
          print(base_uri, code, data, err, headers)
          local iconStyle = {
            DrawChrome = true,
            HorizontalAlignment = "Center",
            Legend = "",
            Padding = 0,
            Margin = 0,
            IconData = Qlib.base64_enc(data)
          }
          Controls.thumbnail.Style = rapidjson.encode(iconStyle)
        end
      }
    end
  }
end
]]
function get_file_thumbnail(index, filename)
  if index <= media_item_count then
    HttpClient.Download {
      Url = string.format("http://%s/Thumbs/%s", ip_address, filename:gsub("%.%w+", ".jpg")),
      Headers = {},
      Auth = "basic",
      Timeout = 10,
      EventHandler = function(table, code, data, err, headers)
        if code == 200 then
          local iconStyle = {
            DrawChrome = true,
            HorizontalAlignment = "Center",
            Legend = "",
            Padding = 0,
            Margin = 0,
            IconData = Qlib.base64_enc(data)
          }
          for i = 1, layer_count do
            Controls[string.format("media_thumbnail_%s_layer_%s", index, i)].Style = rapidjson.encode(iconStyle)
          end
        end
      end
    }
  end
end

-- Layer Parameters

function cmd_file_select(layer, x) -- 0..65535: File Select
  if file_metadata_list[Controls["file_select_" .. layer].String] then
    Controls["duration_" .. layer].String =
      os.date("!%X", math.floor(file_metadata_list[Controls["file_select_" .. layer].String].duration))
    fn_send(layer, "FILE SELECT", x)
  end
end

function cmd_intensity(layer, x)
  fn_send(layer, "INTENSITY", x)
end

function cmd_in_frame(layer, x)
  fn_send(layer, "IN FRAME", x)
end

function cmd_out_frame(layer, x)
  fn_send(layer, "OUT FRAME", x)
end

function cmd_play_mode(layer, x)
  fn_send(layer, "PLAY MODE", play_mode_list[x])
end

function cmd_framing(layer, x)
  fn_send(layer, "FRAMING MODE", framing_mode_list[x])
end

function cmd_blend_mode(layer, x)
  fn_send(layer, "BLEND MODE", blend_mode_list[x])
end

function cmd_lut_select(layer, x)
  fn_send(layer, "LUT", x)
end

function cmd_play_speed(layer, x)
  fn_send(layer, "PLAY SPEED", x)
end

function cmd_movement_speed(layer, x) -- reserved for future use
  fn_send(layer, "MOVEMENT SPEED", x)
end

function cmd_tc_hour(layer, x)
  fn_send(layer, "MTC HOUR", x)
end

function cmd_tc_minute(layer, x)
  fn_send(layer, "MTC MINUTE", x)
end

function cmd_tc_second(layer, x)
  fn_send(layer, "MTC SECOND", x)
end

function cmd_tc_frame(layer, x)
  fn_send(layer, "MTC FRAME", x)
end

function cmd_scale(layer, x)
  fn_send(layer, "SCALE", x)
end

function cmd_aspect_ratio(layer, x)
  fn_send(layer, "ASPECT RATIO", x)
end

function cmd_position_x(layer, x)
  fn_send(layer, "POSITION X", x)
end

function cmd_position_y(layer, x)
  fn_send(layer, "POSITION Y", x)
end

function cmd_rotation_x(layer, x)
  fn_send(layer, "ROTATION X", x)
end

function cmd_rotation_y(layer, x)
  fn_send(layer, "ROTATION Y", x)
end

function cmd_rotation_z(layer, x)
  fn_send(layer, "ROTATION Z", x)
end

function cmd_red(layer, x)
  fn_send(layer, "RED", x)
end

function cmd_green(layer, x)
  fn_send(layer, "GREEN", x)
end

function cmd_blue(layer, x)
  fn_send(layer, "BLUE", x)
end

function cmd_hue(layer, x)
  fn_send(layer, "HUE", x)
end

function cmd_saturation(layer, x)
  fn_send(layer, "SATURATION", x)
end

function cmd_contrast(layer, x)
  fn_send(layer, "CONTRAST", x)
end

function cmd_strobe(layer, x)
  fn_send(layer, "STROBE", x)
end

function cmd_volume(layer, x)
  fn_send(layer, "VOLUME", x)
end

for i = 1, 2 do -- NO IDEA IF THIS WORKS! PLEASE TEST!!
  _G["cmd_fx" .. i .. "_select"] = function(layer, x)
    fn_send(layer, "FX" .. i .. " SELECT", x)
  end
  _G["cmd_fx" .. i .. "_opacity"] = function(layer, x)
    fn_send(layer, "FX" .. i .. " OPACITY", x)
  end
  for p = 1, 16 do
    _G["cmd_fx" .. i .. "_parameter_" .. p] = function(layer, x)
      fn_send(layer, "FX" .. i .. " PARAM " .. p, x)
    end
  end
end

for layer, seek_timer in pairs(seek_timer_list) do
  seek_timer.EventHandler = function(timer)
    if Controls[string.format("seek_%s", layer)].String == seek_last_value[layer] then
      if Controls["file_select_" .. layer].String ~= "" then
        --[[
        local second =
          file_metadata_list[Controls["file_select_" .. layer].String].duration * Controls["seek_" .. layer].Position
          ]]
        local frame =
          math.floor(
          file_metadata_list[Controls["file_select_" .. layer].String].duration *
            file_metadata_list[Controls["file_select_" .. layer].String].rate *
            Controls["seek_" .. layer].Position
        )
        udp:Send(
          ip_address,
          udp_port,
          string.format(
            'localSVPatch.SetPatchDouble("/LAYER %s/Transport Control/MediaClockGenerator/Seek", %s)',
            layer,
            frame + 1
          )
        )
        Timer.CallAfter(
          function()
            udp:Send(
              ip_address,
              udp_port,
              string.format(
                'localSVPatch.SetPatchDouble("/LAYER %s/Transport Control/MediaClockGenerator/Seek", %s)',
                layer,
                frame
              )
            )
          end,
          0.1
        )
      end
      seek_timer_list[layer]:Stop()
    end
    seek_last_value[layer] = Controls[string.format("seek_%s", layer)].String
  end
end

-- Read Device Settings

function cmd_read_system_settings()
  fn_read_json_command("System Settings", "UDPMsgReturn")
end

function cmd_read_media_list()
  fn_read_json_command("Media List", "UDPMsgReturn")
end

function cmd_read_output_mapping()
  fn_read_json_command("Output Mapping", "UDPMsgReturn")
end

function cmd_read_play_list()
  fn_read_json_command("Play List", "UDPMsgReturn")
end

function cmd_read_timecode_cue_list()
  fn_read_json_command("Timecode Cue List", "UDPMsgReturn")
end

function cmd_vioso_wb_settings()
  fn_read_json_command("Vioso WB Settings", "UDPMsgReturn")
end

function cmd_read_screenberry_wb_settings()
  fn_read_json_command("Screenberry WB Settings", "UDPMsgReturn")
end

-- Device Settings

-- Define Control EventHandlers
Controls["test"].EventHandler = function()
  if (Controls["test"].Value == 1) then
    print("Test button pressed!")
    -- Example of sending a command
    Connect(Properties["IP Address"].Value)
  end
end

for i = 1, layer_count do
  Controls["file_select_" .. i].EventHandler = function()
    cmd_file_select(i, file_list[Controls["file_select_" .. i].String])
  end
  Controls["intensity_" .. i].EventHandler = function()
    cmd_intensity(i, Controls["intensity_" .. i].Position)
  end
  Controls["in_frame_" .. i].EventHandler = function()
    cmd_in_frame(i, Controls["in_frame_" .. i].Value)
  end
  Controls["out_frame_" .. i].EventHandler = function()
    cmd_out_frame(i, Controls["out_frame_" .. i].Value)
  end
  Controls["play_mode_" .. i].EventHandler = function()
    cmd_play_mode(i, Controls["play_mode_" .. i].String)
  end
  Controls["framing_mode_" .. i].EventHandler = function()
    cmd_framing(i, Controls["framing_mode_" .. i].String)
  end
  Controls["blend_mode_" .. i].EventHandler = function()
    cmd_blend_mode(i, Controls["blend_mode_" .. i].String)
  end
  --[[Controls["lut_select_" .. i].EventHandler = function() --todo!
    cmd_lut_select(i, Controls["lut_select_" .. i].String)
  end]]
  Controls["play_speed_" .. i].EventHandler = function()
    local converted_value = Controls["play_speed_" .. i].Position
    if Controls["play_speed_" .. i].Position >= 0.1 then
      converted_value = 0.5555555555555556 * Controls["play_speed_" .. i].Position + 0.4444444444444444
    else
      converted_value = 5 * Controls["play_speed_" .. i].Position
    end
    cmd_play_speed(i, converted_value)
  end
  Controls["move_speed_" .. i].EventHandler = function()
    -- reserved for future use
    cmd_movement_speed(i, Controls["movement_speed_" .. i].Position)
  end
  Controls["mtc_hour_" .. i].EventHandler = function()
    cmd_tc_hour(i, Controls["mtc_hour_" .. i].Value)
  end
  Controls["mtc_minute_" .. i].EventHandler = function()
    cmd_tc_minute(i, Controls["mtc_minute_" .. i].Value)
  end
  Controls["mtc_second_" .. i].EventHandler = function()
    cmd_tc_second(i, Controls["mtc_second_" .. i].Value)
  end
  Controls["mtc_frame_" .. i].EventHandler = function()
    cmd_tc_frame(i, Controls["mtc_frame_" .. i].Value)
  end
  Controls["scale_" .. i].EventHandler = function()
    local converted_value = Controls["scale_" .. i].Position
    if Controls["scale_" .. i].Position >= 0.1 then
      converted_value = 0.5555555555555556 * Controls["scale_" .. i].Position + 0.4444444444444444
    else
      converted_value = 5 * Controls["scale_" .. i].Position
    end
    cmd_scale(i, converted_value)
  end
  Controls["aspect_ratio_" .. i].EventHandler = function()
    cmd_aspect_ratio(i, Controls["aspect_ratio_" .. i].Position)
  end
  Controls["position_x_" .. i].EventHandler = function()
    cmd_position_x(i, (Controls["position_x_" .. i].Value + 100) / 200)
  end
  Controls["position_y_" .. i].EventHandler = function()
    cmd_position_y(i, (Controls["position_y_" .. i].Value + 100) / 200)
  end
  Controls["rotation_x_" .. i].EventHandler = function()
    cmd_rotation_x(i, (Controls["rotation_x_" .. i].Value + 1440) / 2880)
  end
  Controls["rotation_y_" .. i].EventHandler = function()
    cmd_rotation_y(i, (Controls["rotation_y_" .. i].Value + 1440) / 2880)
  end
  Controls["rotation_z_" .. i].EventHandler = function()
    cmd_rotation_z(i, (Controls["rotation_z_" .. i].Value + 1440) / 2880)
  end
  Controls["red_" .. i].EventHandler = function()
    cmd_red(i, (Controls["red_" .. i].Value + 100) / 200)
  end
  Controls["green_" .. i].EventHandler = function()
    cmd_green(i, (Controls["green_" .. i].Value + 100) / 200)
  end
  Controls["blue_" .. i].EventHandler = function()
    cmd_blue(i, (Controls["blue_" .. i].Value + 100) / 200)
  end
  Controls["hue_" .. i].EventHandler = function()
    cmd_hue(i, Controls["hue_" .. i].Position)
  end
  Controls["saturation_" .. i].EventHandler = function()
    cmd_saturation(i, (Controls["saturation_" .. i].Value + 100) / 200)
  end
  Controls["contrast_" .. i].EventHandler = function()
    cmd_contrast(i, (Controls["contrast_" .. i].Value + 100) / 200)
  end
  Controls["strobe_" .. i].EventHandler = function()
    cmd_strobe(i, Controls["strobe_" .. i].Position)
  end
  Controls["volume_" .. i].EventHandler = function()
    cmd_volume(i, Controls["volume_" .. i].Position)
  end
  Controls["seek_" .. i].EventHandler = function()
    seek_timer_list[i]:Start(.2)
  end

  for p = 1, media_item_count do
    Controls[string.format("media_thumbnail_%s_layer_%s", p, i)].EventHandler = function()
      if Controls[string.format("media_name_%s_layer_%s", p, i)].String ~= nil then
        cmd_file_select(i, file_list[Controls[string.format("media_name_%s_layer_%s", p, i)].String])
      end
    end
  end
  --TODO -- FX CONTROLS

  -- Choices
  Controls["play_mode_" .. i].Choices = play_mode_choices
  Controls["framing_mode_" .. i].Choices = framing_mode_choices
  Controls["blend_mode_" .. i].Choices = blend_mode_choices
  --Controls["fx_m" .. i].Choices = fx_choices
end

-- Connect
if isIpAddress(ip_address) then
  print("Connecting to Hive player at " .. ip_address)
  Connect(ip_address, fn_hive_connect_Status)
else
  print("Invalid IP address: " .. ip_address)
end

--udp:Open("", udp_port)
--fnPoll()
--fn_poll_transport()
end
