-- Information block for the plugin
PluginInfo = {
  Name = "Hive~Beeblade",
  Version = "1.0",
  BuildVersion = "0.0.0.290",
  Id = "c88de492-bccb-49bb-9927-852367b9eb16",
  Author = "Carrier Labs & Hive Media Control",
  Description = "Plugin to control Hive Beeblade, Beebox and Nexus devices" ,
  ShowDebug = true 
}
-- This file contains constant variables used throughout the project
-- These variables should not be changed during runtime
local layer_count = 2
local max_media_items = 120

--create a table of colors to be used in the UI
local Colors = {
  hive_yellow = {255, 215, 0},
  hive_grey = {18, 22, 26},
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  enable_green = {0, 164, 0},
  transparent = {0, 0, 0, 0},
  control_label = {170, 170, 170},
  control_background = {18, 22, 26},
  control_background_light = {64, 64, 64},
  control_text = {170, 170, 170},
}

-- Define a list of controls with their properties
local control_list = {
  ["File Select"] = {
    Name = "file_select_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Folder Select"] = {
    Name = "folder_select_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Time Elapsed"] = {
    Name = "time_elapsed_",
    ControlType = "Indicator",
    IndicatorType = "Text",
    PinStyle = "Output",
    UserPin = true
  },
  ["Duration"] = {
    Name = "duration_",
    ControlType = "Indicator",
    IndicatorType = "Text",
    PinStyle = "Output",
    UserPin = true
  },
  ["Seek"] = {
    Name = "seek_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Fader",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Intensity"] = {
    Name = "intensity_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["In Frame"] = {
    Name = "in_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 9999999,
    PinStyle = "Both",
    UserPin = true
  },
  ["Out Frame"] = {
    Name = "out_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 9999999,
    PinStyle = "Both",
    UserPin = true
  },
  ["Play Mode"] = {
    Name = "play_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Framing Mode"] = {
    Name = "framing_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Blend Mode"] = {
    Name = "blend_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["LUT"] = {
    Name = "lut_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Play Speed"] = {
    Name = "play_speed_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 1000,
    PinStyle = "Both",
    UserPin = true
  },
  ["Move Speed"] = {
    Name = "move_speed_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Hour"] = {
    Name = "mtc_hour_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 23,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Minute"] = {
    Name = "mtc_minute_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Second"] = {
    Name = "mtc_second_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Frame"] = {
    Name = "mtc_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["Scale"] = {
    Name = "scale_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 1000,
    PinStyle = "Both",
    UserPin = true
  },
  ["Aspect Ratio"] = {
    Name = "aspect_ratio_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Position X"] = {
    Name = "position_x_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Position Y"] = {
    Name = "position_y_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation X"] = {
    Name = "rotation_x_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation Y"] = {
    Name = "rotation_y_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation Z"] = {
    Name = "rotation_z_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Red"] = {
    Name = "red_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Green"] = {
    Name = "green_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Blue"] = {
    Name = "blue_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Hue"] = {
    Name = "hue_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Saturation"] = {
    Name = "saturation_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Contrast"] = {
    Name = "contrast_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Strobe"] = {
    Name = "strobe_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Volume"] = {
    Name = "volume_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Transition Duration"] = {
    Name = "transition_duration_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 65535,
    PinStyle = "Both",
    UserPin = true
  },
  ["Transition Mode"] = {
    Name = "transition_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  }
}
-- Create a list of parameter names for easy reference
local parameter_list = {
  "Folder Select",
  "File Select",
  "Time Elapsed",
  "Duration",
  "Seek",
  "Intensity",
  "In Frame",
  "Out Frame",
  "Play Mode",
  "Framing Mode",
  "Blend Mode",
  "LUT",
  "Play Speed",
  "Move Speed",
  "MTC Hour",
  "MTC Minute",
  "MTC Second",
  "MTC Frame",
  "Scale",
  "Aspect Ratio",
  "Position X",
  "Position Y",
  "Rotation X",
  "Rotation Y",
  "Rotation Z",
  "Red",
  "Green",
  "Blue",
  "Hue",
  "Saturation",
  "Contrast",
  "Strobe",
  "Volume",
  "Transition Duration",
  "Transition Mode"
}

local fx1_list = {}
local fx2_list = {}
-- Add FX1 and FX2 parameters to fx1_list, fx2_list
control_list["FX1 Select"] = {
  Name = "fx1_select_",
  ControlType = "Text",
  Style = "ComboBox",
  PinStyle = "Both",
  UserPin = true
}
fx1_list[#fx1_list + 1] = "FX1 Select"
control_list["FX1 Opacity"] = {
  Name = "fx1_opacity_",
  ControlType = "Knob",
  ControlUnit = "Percent",
  Style = "Text Field",
  Min = 0,
  Max = 100,
  PinStyle = "Both",
  UserPin = true
}
fx1_list[#fx1_list + 1] = "FX1 Opacity"
for i = 1, 16 do
  control_list["FX1 Param " .. i] = {
    Name = "fx1_param_" .. i .. "_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  }
  fx1_list[#fx1_list + 1] = "FX1 Param " .. i
end
control_list["FX2 Select"] = {
  Name = "fx2_select_",
  ControlType = "Text",
  Style = "ComboBox",
  PinStyle = "Both",
  UserPin = true
}
fx2_list[#fx2_list + 1] = "FX2 Select"
control_list["FX2 Opacity"] = {
  Name = "fx2_opacity_",
  ControlType = "Knob",
  ControlUnit = "Percent",
  Style = "Text Field",
  Min = 0,
  Max = 100,
  PinStyle = "Both",
  UserPin = true
}
fx2_list[#fx2_list + 1] = "FX2 Opacity"

for i = 1, 16 do
  control_list["FX2 Param " .. i] = {
    Name = "fx2_param_" .. i .. "_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  }
  fx2_list[#fx2_list + 1] = "FX2 Param " .. i
end
-- Define the color of the plugin object in the design
function GetColor(props)
  return Colors.hive_yellow
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  if
    props["Model"] == nil or props["Model"].Value == "PLUTO" or props["Model"].Value == "OSMIA" or
      props["Model"].Value == "MINIMA" or
      props["Model"].Value == "NEXUS"
   then
    return "Hive Beeblade" .. string.char(10) .. props["Model"].Value .. string.char(10) .. props["IP Address"].Value
  else
    return "Hive" .. string.char(10) .. props["Model"].Value .. string.char(10) .. props["IP Address"].Value
  end
end

-- Optional function used if plugin has multiple pages
PageNames = {}
function CreatePages()
  PageNames = {"Status"}
  for i = 1, layer_count do
    table.insert(PageNames, "Layer " .. i)
  end
  table.insert(PageNames, "Media")
  table.insert(PageNames, "Modules")
end

function GetPages(props)
  local pages = {}
  CreatePages()
  for ix, name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Pluto" } )
  end
  return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(
    props,
    {
      Name = "IP Address",
      Type = "string",
      Value = "192.168.1.30"
    }
  )
  
  table.insert(
    props,
    {
      Name = "Model",
      Type = "enum",
      Choices = {"PLUTO", "OSMIA", "MINIMA", "NEXUS", "PLAYER_1", "PLAYER_2", "PLAYER_3", "PLAYER_4"},
      Value = "PLUTO"
    }
  )
  
  table.insert(
    props,
    {
      Name = "Media List Count",
      Type = "integer",
      Value = 20,
      Min = 1,
      Max = 128
    }
  )
  
  table.insert(
    props,
    {
      Name = "Logging Level",
      Type = "enum",
      Choices = {"Normal", "Errors Only", "Debug"},
      Value = "Normal"
    }
  )
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  -- No Pins!
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  -- No components!
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  -- No Wiring!
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  CreatePages()
  -- Controls for Status Page
  table.insert(
    ctrls,
    {
      Name = "online",
      ControlType = "Indicator",
      IndicatorType = "Led",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ip_address",
      ControlType = "Text",
      --IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "device_name",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "version",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "status",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "output_resolution",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "output_framerate",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "engine_fps",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "activity",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "netmask",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "serial",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "bee_type",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "file_count",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "free_space",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "cpu_power",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "sync_status",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "thumbnail",
      ControlType = "Button",
      ButtonType = "Momentary",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  
  -- Controls for Media and Layers Pages
  for i = 1, layer_count do
    for k, v in pairs(control_list) do
      table.insert(
        ctrls,
        {
          Name = v.Name .. i,
          ControlType = v.ControlType,
          ControlUnit = v.ControlUnit,
          Min = v.Min,
          Max = v.Max,
          PinStyle = v.PinStyle,
          UserPin = v.UserPin
        }
      )
    end
    for p = 1, max_media_items do
      table.insert(
        ctrls,
        {
          Name = string.format("media_name_%s_layer_%s", p, i),
          ControlType = "Indicator",
          IndicatorType = "Text",
          PinStyle = "Output",
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = string.format("media_thumbnail_%s_layer_%s", p, i),
          ControlType = "Button",
          ButtonType = "StateTrigger",
          Min = 0,
          Max = 1,
          PinStyle = "None",
          UserPin = false
        }
      )
  
      -- Controls for Modules Page
      table.insert(
        ctrls,
        {
          Name = "playlist_enable",
          ControlType = "Button",
          ButtonType = "Toggle",
          PinStyle = "Both",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "l1_timecode_enable",
          ControlType = "Button",
          ButtonType = "Toggle",
          PinStyle = "Both",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "l2_timecode_enable",
          ControlType = "Button",
          ButtonType = "Toggle",
          PinStyle = "Both",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "timeline_enable",
          ControlType = "Button",
          ButtonType = "Toggle",
          PinStyle = "Both",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "schedule_enable",
          ControlType = "Button",
          ButtonType = "Toggle",
          PinStyle = "Both",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "playlist_rows",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Style = "Text Field",
          PinStyle = "Output",
          Min = 0,
          Max = 9999999,
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "playlist_current_row",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Style = "Text Field",
          PinStyle = "Output",
          Min = 0,
          Max = 9999999,
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "l1_tc_rows",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Style = "Text Field",
          PinStyle = "Output",
          Min = 0,
          Max = 9999999,
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "l2_tc_rows",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Style = "Text Field",
          PinStyle = "Output",
          Min = 0,
          Max = 9999999,
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "playlist_play_previous",
          ControlType = "Button",
          ButtonType = "Trigger",
          PinStyle = "Input",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "playlist_play_next",
          ControlType = "Button",
          ButtonType = "Trigger",
          PinStyle = "Input",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "playlist_play_first",
          ControlType = "Button",
          ButtonType = "Trigger",
          PinStyle = "Input",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "playlist_play_last",
          ControlType = "Button",
          ButtonType = "Trigger",
          PinStyle = "Input",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "playlist_play_row",
          ControlType = "Button",
          ButtonType = "Trigger",
          PinStyle = "Input",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "playlist_play_row_index",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Style = "Text Field",
          PinStyle = "Both",
          Min = 1,
          Max = 9999999,
          DefaultValue = 1,
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "system_restart",
          ControlType = "Button",
          ButtonType = "Trigger",
          PinStyle = "Input",
          Count = 1,
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = "system_shutdown",
          ControlType = "Button",
          ButtonType = "Trigger",
          PinStyle = "Input",
          Count = 1,
          UserPin = true
        }
      )
    end
  end
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  CreatePages()
  local CurrentPage = PageNames[props["page_index"].Value]
  local media_item_count = props["Media List Count"].Value
  local column_size = 12
  local fx1_column_size = 6
  local fx2_column_size = 6
  local btn_size = {32, 24}
  local btn_gap = {4, 4}
  local status_groupbox_size = {12.5 * btn_size[1], 11 * btn_size[2]}
  local player_groupbox_position = {0, 0}
  local player_groupbox_size = {
    (((math.floor((#parameter_list / column_size)) + 1) * 6) + 1) * btn_size[1],
    (column_size + 2) * btn_size[2]
  }
  local fx1_groupbox_size = {
    (((math.floor((#fx1_list / fx1_column_size))) * 6) + 1) * btn_size[1],
    (fx1_column_size + 2) * btn_size[2]
  }
  local fx2_groupbox_size = {
    (((math.floor((#fx2_list / fx2_column_size))) * 6) + 1) * btn_size[1],
    (fx2_column_size + 2) * btn_size[2]
  }
  local preview_size = {2.4 * btn_size[1], (1.35 * btn_size[1])}
  local media_list_groupbox_size = {
    (2 * preview_size[1]) + 12 + (3 * btn_size[1]),
    ((media_item_count + 1) * preview_size[2]) + 8
  }
  local module_enable_groupbox_size = {(16 * btn_size[1]) + (4 * btn_gap[1]), (2 * btn_size[2]) + (2 * btn_gap[2])}
  local module_playlist_groupbox_size = {(16 * btn_size[1]) + (4 * btn_gap[1]), (6 * btn_size[2]) + (2 * btn_gap[2])}
  local module_system_groupbox_size = {(16 * btn_size[1]) + (4 * btn_gap[1]), (2 * btn_size[2]) + (2 * btn_gap[2])}
  
  if CurrentPage then
    if CurrentPage == "Status" then
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Text = "Setup",
        HTextAlign = "Left",
        CornerRadius = 8,
        Fill = Colors.hive_grey,
        StrokeWidth = 1,
        Position = {0, 0},
        Size = status_groupbox_size
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "ONLINE:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (0.5 * btn_size[2]) + (0 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "IP ADDRESS:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (1.5 * btn_size[2]) + (1 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "DEVICE NAME:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (2.5 * btn_size[2]) + (2 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "VERSION:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (3.5 * btn_size[2]) + (3 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "STATUS:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (4.5 * btn_size[2]) + (4 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "OUTPUT RES:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (5.5 * btn_size[2]) + (5 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "OUTPUT Hz:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (6.5 * btn_size[2]) + (6 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "ENGINE FPS:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (7.5 * btn_size[2]) + (7 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "ACTIVITY:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (8.5 * btn_size[2]) + (8 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "NETMASK:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {6 * btn_size[1], (1.5 * btn_size[2]) + (1 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "SERIAL NO:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {6 * btn_size[1], (2.5 * btn_size[2]) + (2 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "BEE TYPE:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {6 * btn_size[1], (3.5 * btn_size[2]) + (3 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "FILE COUNT:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {6 * btn_size[1], (4.5 * btn_size[2]) + (4 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "FREE SPACE:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {6 * btn_size[1], (5.5 * btn_size[2]) + (5 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "CPU POWER:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {6 * btn_size[1], (6.5 * btn_size[2]) + (6 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "SYNC STATUS:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {6 * btn_size[1], (7.5 * btn_size[2]) + (7 * btn_gap[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    layout["online"] = {
      PrettyName = "System~Online",
      Style = "Indicator",
      Color = {0, 255, 0},
      Position = {3 * btn_size[1], (0.5 * btn_size[2]) + (0 * btn_gap[2])},
      Size = {btn_size[2], btn_size[2]}
    }
    layout["ip_address"] = {
      PrettyName = "System~IP Address",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {3 * btn_size[1], (1.5 * btn_size[2]) + (1 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["device_name"] = {
      PrettyName = "System~Device Name",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      StrokeWidth = 1,
      Position = {3 * btn_size[1], (2.5 * btn_size[2]) + (2 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["version"] = {
      PrettyName = "System~Version",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {3 * btn_size[1], (3.5 * btn_size[2]) + (3 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["status"] = {
      PrettyName = "System~Status",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {3 * btn_size[1], (4.5 * btn_size[2]) + (4 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["output_resolution"] = {
      PrettyName = "System~Output Resolution",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {3 * btn_size[1], (5.5 * btn_size[2]) + (5 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["output_framerate"] = {
      PrettyName = "System~Output Framerate",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {3 * btn_size[1], (6.5 * btn_size[2]) + (6 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["engine_fps"] = {
      PrettyName = "System~Engine FPS",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {3 * btn_size[1], (7.5 * btn_size[2]) + (7 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["activity"] = {
      PrettyName = "System~Engine FPS",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.hive_yellow,
      StrokeColor = Colors.control_text,
      FontSize = 8,
      StrokeWidth = 1,
      Position = {3 * btn_size[1], (8.5 * btn_size[2]) + (8 * btn_gap[2])},
      Size = {9 * btn_size[1], btn_size[2]}
    }
    layout["netmask"] = {
      PrettyName = "System~NetMask",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {9 * btn_size[1], (1.5 * btn_size[2]) + (1 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["serial"] = {
      PrettyName = "System~Serial Number",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {9 * btn_size[1], (2.5 * btn_size[2]) + (2 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["bee_type"] = {
      PrettyName = "System~Bee Type",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {9 * btn_size[1], (3.5 * btn_size[2]) + (3 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["file_count"] = {
      PrettyName = "System~Media File Count",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {9 * btn_size[1], (4.5 * btn_size[2]) + (4 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["free_space"] = {
      PrettyName = "System~Free Storage Space",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {9 * btn_size[1], (5.5 * btn_size[2]) + (5 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["cpu_power"] = {
      PrettyName = "System~CPU Power",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {9 * btn_size[1], (6.5 * btn_size[2]) + (6 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["sync_status"] = {
      PrettyName = "System~Beesync Status",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {9 * btn_size[1], (7.5 * btn_size[2]) + (7 * btn_gap[2])},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    elseif CurrentPage:sub(1, 6) == "Layer " then
    local i = tonumber(CurrentPage:match("Layer (%d+)"))
    
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Text = "Parameters",
        HTextAlign = "Left",
        CornerRadius = 8,
        Fill = Colors.hive_grey,
        StrokeWidth = 1,
        Position = {
          player_groupbox_position[1],
          player_groupbox_position[2]
        },
        Size = player_groupbox_size
      }
    )
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Text = "FX 1",
        HTextAlign = "Left",
        CornerRadius = 8,
        Fill = Colors.hive_grey,
        StrokeWidth = 1,
        Position = {
          player_groupbox_position[1],
          player_groupbox_size[2] + 8
        },
        Size = fx1_groupbox_size
      }
    )
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Text = "FX 2",
        HTextAlign = "Left",
        CornerRadius = 8,
        Fill = Colors.hive_grey,
        StrokeWidth = 1,
        Position = {
          player_groupbox_position[1],
          player_groupbox_size[2] + 16 + fx1_groupbox_size[2]
        },
        Size = fx2_groupbox_size
      }
    )
    for k, v in pairs(parameter_list) do
      local column = math.floor((k - 1) / column_size) + 1
      local row = k - (column - 1) * column_size
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = v .. ":",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Regular",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {
            player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)),
            player_groupbox_position[2] + (row * btn_size[2])
          },
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      local controlCol = Colors.control_background
      if control_list[v].Style == "Text Field" and control_list[v].ControlUnit == "Percent" then
        controlCol = Colors.control_background_light
      end
      layout[control_list[v].Name .. i] = {
        PrettyName = "Layer " .. i .. "~" .. v,
        Style = control_list[v].Style,
        Color = controlCol,
        TextColor = Colors.control_text,
        StrokeColor = Colors.control_text,
        FontSize = (v == "File Select") and 8 or 12,
        StrokeWidth = 1,
        Position = {
          player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)) + (3 * btn_size[1]),
          player_groupbox_position[2] + (row * btn_size[2])
        },
        Size = {3 * btn_size[1], btn_size[2]}
      }
    end
    for k, v in pairs(fx1_list) do
      local column = math.floor((k - 1) / fx1_column_size) + 1
      local row = k - (column - 1) * fx1_column_size
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = v .. ":",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Regular",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {
            player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)),
            player_groupbox_size[2] + 8 + (row * btn_size[2])
          },
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      local controlCol = Colors.control_background
      if control_list[v].Style == "Text Field" and control_list[v].ControlUnit == "Percent" then
        controlCol = Colors.control_background_light
      end
      layout[control_list[v].Name .. i] = {
        PrettyName = "Layer " .. i .. "~" .. v,
        Style = control_list[v].Style,
        Color = controlCol,
        TextColor = Colors.control_text,
        StrokeColor = Colors.control_text,
        FontSize = 12,
        StrokeWidth = 1,
        Position = {
          player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)) + (3 * btn_size[1]),
          player_groupbox_size[2] + 8 + (row * btn_size[2])
        },
        Size = {3 * btn_size[1], btn_size[2]}
      }
    end
    for k, v in pairs(fx2_list) do
      local column = math.floor((k - 1) / fx2_column_size) + 1
      local row = k - (column - 1) * fx2_column_size
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = v .. ":",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Regular",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {
            player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)),
            player_groupbox_size[2] + 16 + fx1_groupbox_size[2] + (row * btn_size[2])
          },
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      local controlCol = Colors.control_background
      if control_list[v].Style == "Text Field" and control_list[v].ControlUnit == "Percent" then
        controlCol = Colors.control_background_light
      end
      layout[control_list[v].Name .. i] = {
        PrettyName = "Layer " .. i .. "~" .. v,
        Style = control_list[v].Style,
        Color = controlCol,
        TextColor = Colors.control_text,
        StrokeColor = Colors.control_text,
        FontSize = 12,
        StrokeWidth = 1,
        Position = {
          player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)) + (3 * btn_size[1]),
          player_groupbox_size[2] + 16 + fx1_groupbox_size[2] + (row * btn_size[2])
        },
        Size = {3 * btn_size[1], btn_size[2]}
      }
    end
    elseif CurrentPage == "Media" then
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Text = "Media List",
        HTextAlign = "Left",
        CornerRadius = 8,
        Fill = Colors.hive_grey,
        StrokeWidth = 1,
        Position = {0, 0},
        Size = media_list_groupbox_size
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "File Name",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {0, (1 * btn_size[2])},
        Size = {2 * btn_size[1], btn_size[2]}
      }
    )
    
    for i = 1, layer_count do
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = string.format("Layer %s\nClip Select", i),
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Regular",
          HTextAlign = "Centre",
          Color = Colors.control_label,
          Position = {((i - 1) * preview_size[1]) + (3 * btn_size[1]) + 8, 8},
          Size = preview_size
        }
      )
      for p = 1, media_item_count do
        layout[string.format("media_name_%s_layer_%s", p, i)] = {
          PrettyName = string.format("Layer %s~Media List~%s~Name", i, p),
          Style = "TextBox",
          Color = Colors.control_background,
          TextColor = Colors.control_text,
          HTextAlign = "Right",
          VTextAlign = "Centre",
          FontSize = 8,
          WordWrap = true,
          StrokeWidth = 0,
          Position = {
            4,
            (2 * btn_size[2]) + ((p - 1) * preview_size[2])
          },
          Size = {3 * btn_size[1], preview_size[2]}
        }
    
        layout[string.format("media_thumbnail_%s_layer_%s", p, i)] = {
          PrettyName = string.format("Layer %s~Media List~%s~Select", i, p),
          UnlinkOffColor = true,
          OffColor = Colors.transparent,
          Color = Colors.Red,
          StrokeColor = Colors.control_text,
          ButtonVisualStyle = "Flat",
          Position = {
            ((i - 1) * preview_size[1]) + (3 * btn_size[1]) + 8,
            (2 * btn_size[2]) + ((p - 1) * preview_size[2])
          },
          Size = preview_size
        }
      end
    end
    elseif CurrentPage == "Modules" then
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Text = "Enable Disable",
        HTextAlign = "Left",
        CornerRadius = 8,
        Fill = Colors.hive_grey,
        StrokeWidth = 1,
        Position = {0, 0},
        Size = module_enable_groupbox_size
      }
    )
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Text = "Playlist Functions",
        HTextAlign = "Left",
        CornerRadius = 8,
        Fill = Colors.hive_grey,
        StrokeWidth = 1,
        Position = {0, module_enable_groupbox_size[2] + 4},
        Size = module_playlist_groupbox_size
      }
    )
    
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Text = "System",
        HTextAlign = "Left",
        CornerRadius = 8,
        Fill = Colors.hive_grey,
        StrokeWidth = 1,
        Position = {0, module_enable_groupbox_size[2] + module_playlist_groupbox_size[2] + 8},
        Size = module_system_groupbox_size
      }
    )
    
    layout["playlist_enable"] = {
      PrettyName = "Modules~Playlist Enable",
      Style = "Button",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "Playlist",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {(2 * btn_gap[1]), btn_size[2]},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["l1_timecode_enable"] = {
      PrettyName = "Modules~Layer 1 TC Cuelist Enable",
      Style = "Button",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "L1 TC Cuelist",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {(3 * btn_size[1]) + (4 * btn_gap[1]), btn_size[2]},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["l2_timecode_enable"] = {
      PrettyName = "Modules~Layer 2 TC Cuelist Enable",
      Style = "Button",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "L2 TC Cuelist",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {(6 * btn_size[1]) + (6 * btn_gap[1]), btn_size[2]},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["timeline_enable"] = {
      PrettyName = "Modules~Timeline Enable",
      Style = "Button",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "Timeline",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {(9 * btn_size[1]) + (8 * btn_gap[1]), btn_size[2]},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["schedule_enable"] = {
      PrettyName = "Modules~Schedule Enable",
      Style = "Button",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "Scheduler",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {(12 * btn_size[1]) + (10 * btn_gap[1]), btn_size[2]},
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "Playlist Rows:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {
          (0 * btn_size[1]) + (1 * btn_gap[1]),
          (1 * btn_gap[2]) + module_enable_groupbox_size[2] + (1 * btn_size[2])
        },
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "Current Row:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {
          (0 * btn_size[1]) + (1 * btn_gap[1]),
          (2 * btn_gap[2]) + module_enable_groupbox_size[2] + (2 * btn_size[2])
        },
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "L1 TC Rows:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {
          (0 * btn_size[1]) + (1 * btn_gap[1]),
          (3 * btn_gap[2]) + module_enable_groupbox_size[2] + (3 * btn_size[2])
        },
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    table.insert(
      graphics,
      {
        Type = "Text",
        Text = "L2 TC Rows:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Regular",
        HTextAlign = "Right",
        Color = Colors.control_label,
        Position = {
          (0 * btn_size[1]) + (1 * btn_gap[1]),
          (4 * btn_gap[2]) + module_enable_groupbox_size[2] + (4 * btn_size[2])
        },
        Size = {3 * btn_size[1], btn_size[2]}
      }
    )
    
    layout["playlist_rows"] = {
      PrettyName = "Modules~Playlist Rows",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (3 * btn_size[1]) + (1 * btn_gap[1]),
        (1 * btn_gap[2]) + module_enable_groupbox_size[2] + (1 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["playlist_current_row"] = {
      PrettyName = "Modules~Playlist Current Row",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (3 * btn_size[1]) + (1 * btn_gap[1]),
        (2 * btn_gap[2]) + module_enable_groupbox_size[2] + (2 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["l1_tc_rows"] = {
      PrettyName = "Modules~Layer 1 Cue List Rows",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (3 * btn_size[1]) + (1 * btn_gap[1]),
        (3 * btn_gap[2]) + module_enable_groupbox_size[2] + (3 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    
    
    layout["l2_tc_rows"] = {
      PrettyName = "Modules~Layer 2 Cue List Rows",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (3 * btn_size[1]) + (1 * btn_gap[1]),
        (4 * btn_gap[2]) + module_enable_groupbox_size[2] + (4 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    
    layout["playlist_play_previous"] = {
      PrettyName = "Modules~Playlist Play Previous",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "<< Previous",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (9 * btn_size[1]) + (3 * btn_gap[1]),
        (1 * btn_gap[2]) + module_enable_groupbox_size[2] + (1 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["playlist_play_next"] = {
      PrettyName = "Modules~Playlist Play Next",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "Next >>",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (12 * btn_size[1]) + (4 * btn_gap[1]),
        (1 * btn_gap[2]) + module_enable_groupbox_size[2] + (1 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["playlist_play_first"] = {
      PrettyName = "Modules~Playlist Play First",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "<<<< First",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (9 * btn_size[1]) + (3 * btn_gap[1]),
        (2 * btn_gap[2]) + module_enable_groupbox_size[2] + (2 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["playlist_play_last"] = {
      PrettyName = "Modules~Playlist Play Last",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "Last >>>>",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (12 * btn_size[1]) + (4 * btn_gap[1]),
        (2 * btn_gap[2]) + module_enable_groupbox_size[2] + (2 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["playlist_play_row"] = {
      PrettyName = "Modules~Playlist Play Row",
      ButtonStyle = "Toggle",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "Play Row",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (9 * btn_size[1]) + (3 * btn_gap[1]),
        (3 * btn_gap[2]) + module_enable_groupbox_size[2] + (3 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    layout["playlist_play_row_index"] = {
      PrettyName = "Modules~Playlist Play Row Index",
      Style = "TextBox",
      Color = Colors.control_background,
      TextColor = Colors.control_text,
      StrokeColor = Colors.control_text,
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (12 * btn_size[1]) + (4 * btn_gap[1]),
        (3 * btn_gap[2]) + module_enable_groupbox_size[2] + (3 * btn_size[2])
      },
      Size = {3 * btn_size[1], btn_size[2]}
    }
    
    
    layout["system_restart"] = {
      PrettyName = "System~Restart Device",
      Style = "Button",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "REBOOT DEVICE",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (3 * btn_size[1]) + (4 * btn_gap[1]),
        (6 * btn_gap[2]) + module_enable_groupbox_size[2] + module_playlist_groupbox_size[2] 
      },
      Size = {4 * btn_size[1], btn_size[2]}
    }
    layout["system_shutdown"] = {
      PrettyName = "System~Shutdown Device",
      Style = "Button",
      ButtonVisualStyle = "Flat",
      Color = Colors.enable_green,
      OffColor = Colors.control_background_light,
      UnlinkOffColor = true,
      TextColor = Colors.White,
      StrokeColor = Colors.control_text,
      Legend = "SHUTDOWN DEVICE",
      FontSize = 12,
      StrokeWidth = 1,
      Position = {
        (9 * btn_size[1]) + (8 * btn_gap[1]),
        (6 * btn_gap[2]) + module_enable_groupbox_size[2] + module_playlist_groupbox_size[2] 
      },
      Size = {4 * btn_size[1], btn_size[2]}
    }
    end
  end
  return layout, graphics
end

--Start event based logic
if Controls then
-- This script is automatically loaded by the main script to define and initialize runtime variables

---- These variables can be changed during runtime
local file_list = {}
local selected_file = {}
local file_metadata_list = {}
local play_mode = {}
local seek_timer_list = {}
local seek_last_value = {}
local playlist_row_count = 0
local playlist_active_row = 1

for i = 1, layer_count do
  play_mode[i] = "In Frame"
  selected_file[i] = ""
  saved_play_mode = {}
  seek_timer_list[i] = Timer.New()
end

local media_item_count = Properties["Media List Count"].Value

local folder_list = {
  ["MEDIA"] = 0
}

local folder_choices = {}
for k, v in pairs(folder_list) do
  table.insert(folder_choices, k)
end

local lut_list = {
  ["NONE"] = 0
}
local lut_choices = {}
for k, v in pairs(lut_list) do
  table.insert(lut_choices, k)
end

-- Key and Value arrays to be used with all ENUM based controls, separating the keys and values
-- is the easiest way to maintain order but still allow them to be edited if required

-- Play Mode
local play_mode_keys = {
  "In Frame",
  "Out Frame",
  "Loop Forward",
  "Loop Reverse",
  "Play Once Forward",
  "Play Once Reverse",
  "Stop",
  "Pause",
  "Bounce (Ping-Pong)",
  "Take Over Frame",
  "Loop Forward with pause on zero intensity",
  "Loop Reverse with pause on zero intensity",
  "Play Once Forward with pause on zero intensity",
  "Play Once Reverse with pause on zero intensity",
  "Bounce (Ping-Pong) with pause on zero intensity",
  "Synchronise to Time code",
  "Loop Forward with re-trigger on intensity",
  "Loop Reverse with re-trigger on intensity",
  "Play Once Forward with re-trigger on intensity",
  "Play Once Reverse with re-trigger on intensity",
  "Bounce with re-trigger on intensity"
}

local play_mode_values = {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  20,
  40,
  41,
  42,
  43,
  45
}

-- Transition Mode
local transition_mode_keys = {
  "Alpha",
  "Additive",
  "Multiply",
  "Difference",
  "Screen",
  "Preserve Luma",
  "Rectangle Wipe",
  "Triangle Wipe",
  "Minimum",
  "Maximum",
  "Subtract",
  "Darken",
  "Lighten",
  "Soft Lighten",
  "Dark Lighten",
  "Exclusion",
  "Random",
  "Ripple",
  "Threshold",
  "Sine",
  "Invert Mask",
  "Noise",
  "Swirl",
  "Gradient",
  "Pixel Sort",
  "Checkerboard",
  "Pulse",
  "Hue Shift",
  "Fractal",
  "Waveform",
  "RGB Split",
  "Glitch"
}

local transition_mode_values = {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31
}

-- Framing Mode
local framing_mode_keys = {
  "Letterbox",
  "Crop",
  "Stretch",
  "Multi Letterbox",
  "Centered"
}

local framing_mode_values = {
  0,
  1,
  2,
  3,
  4
}

-- Blend Mode
local blend_mode_keys = {
  "Alpha",
  "Additive",
  "Multiply",
  "Difference",
  "Screen",
  "Preserve Luma",
  "Rectangle Wipe",
  "Triangle Wipe"
}

local blend_mode_values = {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7
}

-- FX
local fx_keys = {
  "NONE",
  "OLD TV",
  "SEPIA",
  "FEEDBACK",
  "BLUR",
  "CRYSTALISE",
  "FRACTAL SOUP",
  "RADAR",
  "PIXELISE",
  "SOFT EDGE OVAL",
  "TILE",
  "INFINITY ZOOM",
  "DOT GRID",
  "KALEIDOSCOPE",
  "MULTI MIRROR",
  "REBELLE DISTORT",
  "4 POINT WARP",
  "HALF TONE",
  "HALF TONE INV",
  "HALF TONE COL",
  "HALF TONE SMP",
  "SWIRL DISTORT",
  "GLITCH SPLIT",
  "BURN MELT NOISE",
  "SHATTER",
  "MULTI NOISE",
  "KALEIDO POP",
  "PRISM MIRAGE",
  "BLOCK PRISM",
  "SQUARE CLOUD",
  "CIRCLE PARTY",
  "EQ TUNNEL",
  "ELECTRO PATTERN",
  "4 POINT MASK",
  "8 POINT MASK",
  "Effect 35",
  "Effect 36",
  "Effect 37",
  "Effect 38",
  "Effect 39",
  "Effect 40"
}

local fx_values = {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40
}

ticker = 1
poll_parameter_list = {}
for _, v in pairs(parameter_list) do
  if v ~= "Time Elapsed" and v ~= "Duration" and v ~= "Seek" then
    table.insert(poll_parameter_list, v:upper())
  end
end

local ip_address = Properties["IP Address"].Value

-- Utility functions to get key from value and vice versa in the ENUM tables
function get_table_key(tblKeys, tblValues, value)
  for i = 1, #tblValues do
    if tblValues[i] == value then
      return tblKeys[i]
    end
  end
  return nil
end

function get_table_value(tblKeys, tblValues, key)
  for i = 1, #tblKeys do
    if tblKeys[i] == key then
      return tblValues[i]
    end
  end
  return nil
end
-- Description: Utility functions for runtime scripts

-- Logging functions
function fn_log_message(message)
  Log.Message(message)
  print(message)
end
function fn_log_error(message)
  if Properties["Logging Level"].Value == "Errors Only" or Properties["Logging Level"].Value == "Debug" then
    Log.Error(message)
    print("Error: " .. message)
  end
end
function fn_log_debug(message)
  if Properties["Logging Level"].Value == "Debug" then
    Log.Message("Debug: " .. message)
    print("Debug: " .. message)
  end
end

---checks if a string represents an ip address
function fn_check_valid_ip(ip)
  if not ip then
    return false
  end
  local a, b, c, d = ip:match("^(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)$")
  a = tonumber(a)
  b = tonumber(b)
  c = tonumber(c)
  d = tonumber(d)
  if not a or not b or not c or not d then
    return false
  end
  if a < 0 or 255 < a then
    return false
  end
  if b < 0 or 255 < b then
    return false
  end
  if c < 0 or 255 < c then
    return false
  end
  if d < 0 or 255 < d then
    return false
  end
  return true
end

-- compares two ip addresses, ignoring leading zeros
function fn_compare_ips(ip1, ip2)
  local function normalize(ip)
    local parts = {}
    if not ip then
      return ""
    end
    for octet in string.gmatch(ip, "%d+") do
      table.insert(parts, tostring(tonumber(octet))) -- remove leading zeros
    end
    return table.concat(parts, ".")
  end
  return normalize(ip1) == normalize(ip2)
end
-- Description: Functions to interact with Hive via WebSocket

-- Load the RapidJSON library for JSON encoding/decoding
rapidjson = require("rapidjson")

-- Load the WebSocket library
ws = WebSocket.New()

-- Variables to manage WebSocket connection and callbacks
local wsConnected = false
local sequenceNo = 0
local pendingCallbacks = {}
local pendingRawCallbacks = {}
local refreshViewMap = {}
local handlers = {}
local connectionCallback = nil
local pingTimer = Timer.New()
local ipTarget = nil
local shouldConnect = false
local dataBuffer = "" -- Buffer to hold incoming data

-- Connect to the Hive WebSocket server
function Connect(ip, statusCallback)
  connectionCallback = statusCallback
  shouldConnect = true
  ipTarget = ip
  if (ipTarget) then
    fn_log_message("Connecting to Hive Device at " .. ipTarget)
    connectSocket(ipTarget)
  else
    fn_log_error("No IP address provided for Device connection.")
  end
end

-- Disconnect from the Hive WebSocket server
function Disconnect()
  shouldConnect = false
  ws:Close()
  wsConnected = false
  fn_log_message("Hive connection closed")
  if connectionCallback then
    connectionCallback(false) -- Call the status callback with false to indicate disconnection
  end
  pingTimer:Stop()
end

-- WebSocket event handlers
ws.Connected = function()
  wsConnected = true
  fn_log_message("Hive connection established")
  if connectionCallback then
    connectionCallback(true) -- Call the status callback with true to indicate success
  end
  -- send ping every 10 seconds to keep connection alive
  pingTimer:Start(10)
end

-- Handle WebSocket closure and attempt to reconnect if needed
ws.Closed = function()
  wsConnected = false
  fn_log_message("Hive connection closed")
  if connectionCallback then
    connectionCallback(false) -- Call the status callback with false to indicate disconnection
  end
  pingTimer:Stop()
  if shouldConnect then
    if ipTarget then
      fn_log_message("Attempting to reconnect to Hive Device at " .. ipTarget)
      connectSocket(ipTarget) -- Attempt to reconnect
    else
      fn_log_error("No IP address provided for reconnection.")
    end
  end
end

-- Handle incoming data from the WebSocket
ws.Data = function(ws, data)
  -- Check if the data is a complete message or part of a larger message
  if (string.len(data) == 16384) then
    dataBuffer = dataBuffer .. data
  else
    -- data is complete, let's process it
    dataBuffer = dataBuffer .. data
    local response = rapidjson.decode(dataBuffer)
    local callback = nil
    -- check if we have a local handler that matches the response name
    if response and response.apiVersion == 1 and response.name and handlers[response.name] then
      -- check if we have a defined handler for this data
      callback = handlers[response.name]
      if callback then
        -- Call the handler with the response data
        callback(response.ret)
      end
    elseif response and response.apiVersion == 1 and response.sequence and pendingCallbacks[response.sequence] then
      callback = pendingCallbacks[response.sequence]
      if callback then
        -- Call the callback with the response data
        callback(response.args.Path, response.ret.Value)
        -- remove the callback from pendingCallbacks after it's called
        pendingCallbacks[response.sequence] = nil
      end
    elseif response and response.apiVersion == 1 and response.sequence and pendingRawCallbacks[response.sequence] then
      callback = pendingRawCallbacks[response.sequence]
      if callback then
        -- Call the callback with the response data
        callback(response.args.Path, dataBuffer)
        -- remove the callback from pendingCallbacks after it's called
        pendingRawCallbacks[response.sequence] = nil
      end
    else
      fn_log_error("No callback / handler found for data: ")
    end
    dataBuffer = "" -- Clear the buffer after processing
  end
end

-- Handle WebSocket errors
ws.Error = function(socket, err)
  fn_log_error("Hive connection error: " .. err)
  pingTimer:Stop()
  -- Attempt to reconnect if the connection is lost
  if wsConnected == false and shouldConnect == true then
    if ipTarget then
      fn_log_message("Attempting to reconnect to Hive Device at " .. ipTarget)
      connectSocket(ipTarget) -- Attempt to reconnect
    end
  end
end

-- Timer to send ping messages to keep the WebSocket connection alive
pingTimer.EventHandler = function()
  fn_log_debug("Sending ping to Hive")
  ws:Ping()
end

-- Function to connect to the WebSocket server
function connectSocket(ip)
  -- Check if the WebSocket is already connected
  if (wsConnected) then
    fn_log_message("WebSocket is already connected.")
    ws:Close()
  end
  -- Connect to the Hive WebSocket server
  fn_log_debug("Connecting to Hive WebSocket at " .. ip)
  ws:Connect("ws", ip, "", 9002)
end

-- Handler for Watched Patch updates
function refreshView(refreshViewMessage)
  local callback = refreshViewMap[refreshViewMessage.Path]
  if callback then
    callback(refreshViewMessage.Path, refreshViewMessage.Value)
  else
    fn_log_error("No callback found for refresh view message: " .. refreshViewMessage)
  end
end

-- Register the refreshView handler
handlers["RefreshView"] = refreshView

-- Function to remove a watch on a specific path
function _RemoveWatch(path)
  if (wsConnected) then
    fn_log_debug("Removing watch for path: " .. path)
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_RemoveWatch",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Public function to remove a watch and its associated callback
function removeWatch(path)
  if path then
    refreshViewMap[path] = nil
    _RemoveWatch(path)
    print("Removed watch for path: " .. path)
  end
end

-- Functions to get patch numerical values
function getPatchDouble(path, callback)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchDouble",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    pendingCallbacks[sequenceNo] = callback
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end
-- Functions to set patch numerical values
function setPatchDouble(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchDouble",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Functions to watch for changes to patch numerical values
function _WatchPatchDouble(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchDouble",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Public function to watch a patch numerical value and set up its callback
function watchPatchDouble(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchDouble(path)
  getPatchDouble(path, callback)
end

-- Public function to get patch string values
function getPatchString(path, callback)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchString",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    pendingCallbacks[sequenceNo] = callback
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Public function to set patch string values
function setPatchString(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchString",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Function to watch changes to patch string values
function _WatchPatchString(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchString",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Public function to watch a patch string value and set up its callback
function watchPatchString(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchString(path)
  getPatchString(path, callback)
end

-- Public function to get patch JSON values
function getPatchJSON(path, callback, raw)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchJSON",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    if raw then
      pendingRawCallbacks[sequenceNo] = callback
    else
      pendingCallbacks[sequenceNo] = callback
    end
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Public function to set patch JSON values
function setPatchJSON(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchJSON",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Public function to update patch JSON values
function updatePatchJSON(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "UpdatePatchJSON",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Function to watch changes to patch JSON values
function _WatchPatchJSON(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchJSON",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

-- Public function to watch a patch JSON value and set up its callback
function watchPatchJSON(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchJSON(path)
  getPatchJSON(path, callback)
end

function fn_hive_connect_Status(status)
  fn_log_debug("Setting connected status to " .. tostring(status))
  if status == true then
    Controls.online.Boolean = true
    fn_watch_parameters()
    fn_update_info()
  else
    Controls.online.Boolean = false
  end
end

function fn_watch_parameters()
  -- Watch for JSON updates
  fn_log_debug("Setting up JSON watchers")
  watchPatchJSON("/System Settings", fn_process_JSON_update)
  watchPatchJSON("/Media List", fn_process_JSON_update)
  watchPatchJSON("/Play List", fn_process_JSON_update)
  watchPatchJSON("/Timecode Cue List", fn_process_JSON_update)
  watchPatchJSON("/Schedule", fn_process_JSON_update)
  watchPatchJSON("/Timeline", fn_process_JSON_update)
  watchPatchDouble("/Playlist Control/Playlist Controller 1/Row Index", fn_process_playlist_row_update)
  -- get the LUT options and update controls
  -- set the RAW mode so we can parse the raw data manually
  getPatchJSON("/LUT Colour Modes", fn_process_LUT_data, true)
  fn_log_debug("LUT options requested")
  watchPatchString(
    "/Status/Text",
    function(path, value)
      Controls.activity.String = value
    end
  )

  -- Watch for value changes in layer parameters
  fn_log_debug("Setting up layer parameter watchers")
  for i = 1, layer_count do
    for _, parameter in ipairs(poll_parameter_list) do
      local path = string.format("/LAYER %s/%s/Value", i, parameter)
      watchPatchDouble(path, fn_process_double_update)
    end
    for _, parameter in ipairs(fx1_list) do
      local path = string.format("/LAYER %s/%s/Value", i, parameter:upper())
      watchPatchDouble(path, fn_process_double_update)
    end
    for _, parameter in ipairs(fx2_list) do
      local path = string.format("/LAYER %s/%s/Value", i, parameter:upper())
      watchPatchDouble(path, fn_process_double_update)
    end
  end

  -- Watch for value changes in transport control parameters
  fn_log_debug("Setting up transport control watchers")
  for i = 1, layer_count do
    watchPatchDouble(string.format("/LAYER %s/Transport Control/Media Time/Value", i), fn_process_transport_update)
  end
end

function fn_poll_info()
  if wsConnected == true then
  fn_log_debug("Polling engine FPS")
  getPatchString(
    "/Mapping/Render Resolution/FPS",
    function(path, value)
      fn_log_debug("Engine FPS: " .. value)
      Controls.engine_fps.String = value
    end
  )
  fn_update_sync_status()
end
  Timer.CallAfter(fn_poll_info, 1)
end

function fn_update_sync_status()
  if wsConnected ~= true then
    return
  end
  fn_log_debug("Polling BeeSync status")
  local url = string.format("http://%s/api/getBeeSyncStatus", ip_address)
  HttpClient.Post {
    Url = url,
    Data = rapidjson.encode({}), -- This can be anything
    Headers = {
      ["Content-Type"] = "application/json"
    },
    EventHandler = function(tbl, code, data, error, headers)
      if code == 200 then
        local info = rapidjson.decode(data)
        fn_log_debug("BeeSync status: " .. info.status)
        Controls.sync_status.String = info.status
      else
        fn_log_error("Failed to get BeeSync status: HTTP " .. tostring(code))
      end
    end
  }
end

function fn_send(layer, cmd, val)
  fn_log_debug(string.format("Sending command to layer %s: %s = %s", layer, cmd, tostring(val)))
  local path = "/LAYER " .. layer .. "/" .. cmd .. "/Value" -- please make this neater with string.format()
  setPatchDouble(path, val)
end

function fn_send_json(cmd, val)
  fn_log_debug(string.format("Sending JSON command: %s = %s", cmd, rapidjson.encode(val)))
  local path = "/" .. cmd
  setPatchJSON(path, val)
end

function fn_update_json(cmd, val)
  fn_log_debug(string.format("Updating JSON command: %s = %s", cmd, rapidjson.encode(val)))
  local path = "/" .. cmd
  updatePatchJSON(path, val)
end

function fn_process_LUT_data(path, data)
  -- The LUT list is inside a JSON object under the "Value" key
  -- however it is not indexed so we have to extract the string pairs manually
  -- in order to maintain the ordering
  -- this is a bit hacky but it works
fn_log_debug("Processing LUT data")
  -- find the start of the "Value" object
  local startPos = data:find('"Value"%s*:%s*{')
  if startPos then
    -- extract substring from "Value": { ... }
    local subStr = data:sub(startPos)
    -- stop at the matching closing brace for Value
    local braceCount, endPos = 0, nil
    for i = 1, #subStr do
      local c = subStr:sub(i, i)
      if c == "{" then
        braceCount = braceCount + 1
      elseif c == "}" then
        braceCount = braceCount - 1
        if braceCount == 0 then
          endPos = i
          break
        end
      end
    end
    if endPos then
      lut_list = {
        ["NONE"] = 0
      }
      lut_choices = {}
      local idx = 1
      table.insert(lut_choices, "NONE") -- Add "NONE" option
      local valueBlock = subStr:sub(1, endPos)
      -- now extract all keys inside "Value"
      for k in valueBlock:gmatch('"([^"]+)"%s*:') do
        if k ~= "Value" then
          table.insert(lut_choices, k)
          lut_list[k] = idx
          idx = idx + 1
        end
      end
      for i = 1, layer_count do
        Controls["lut_" .. i].Choices = lut_choices
      end
    end
  else
    fn_log_error("Failed to find LUT Value block in JSON data")
  end
end

function fn_process_transport_update(path, value)
  local layer, parameter = path:match("/LAYER (%d+)/(%P+)")
  if parameter == "Transport Control" then
    local layer, parameter, sub_parameter = path:match("/LAYER (%d+)/(%P+)/(%P+)")
    if sub_parameter == "Media Time" then
      if Controls["file_select_" .. layer].String ~= "" and not seek_timer_list[tonumber(layer)]:IsRunning() then
        if file_metadata_list[Controls["file_select_" .. layer].String].duration == 0 then
          Controls["seek_" .. layer].Position = 0
          Controls["time_elapsed_" .. layer].String = os.date("!%X", 0)
        else
          local pos = tonumber(value) / file_metadata_list[Controls["file_select_" .. layer].String].duration
          Controls["seek_" .. layer].Position = pos
          Controls["time_elapsed_" .. layer].String = os.date("!%X", math.floor(value))
        end
      end
    end
  else
    fn_log_error("Unknown transport parameter: " .. parameter)
  end
end

function fn_process_playlist_row_update(path, value)
  fn_log_debug("Playlist active row updated to " .. tostring(value + 1))
  playlist_active_row = value + 1 -- convert from 0 based to 1 based
  Controls.playlist_current_row.Value = playlist_active_row
end

function fn_process_double_update(path, value)
  fn_log_debug("Processing double update: " .. path .. " = " .. tostring(value))
  if path:sub(1, 6) == "/LAYER" then -- Layer parameter response
    local layer, parameter = path:match("/LAYER (%d+)/(%P+)/Value")
    if parameter then
      local control = string.format("%s_%s", parameter:gsub("%s", "_"):lower(), layer)
      if parameter == "FILE SELECT" then
        for k, v in pairs(file_list) do
          if v == value then
            Controls[control].String = k
            Controls["duration_" .. control:sub(-1, -1)].String =
              os.date("!%X", math.floor(file_metadata_list[k].duration))
            for media = 1, media_item_count do
              Controls[string.format("media_thumbnail_%s_layer_%s", media, layer)].Boolean =
                Controls[control].String == Controls[string.format("media_name_%s_layer_%s", media, layer)].String
            end
            break
          end
        end
      elseif parameter == "FOLDER SELECT" then
        for k, v in pairs(folder_list) do
          if v == value then
            Controls[control].String = k
            break
          end
        end
      elseif parameter == "LUT" then
        for k, v in pairs(lut_list) do
          if v == value then
            Controls[control].String = k
            break
          end
        end
      elseif parameter:sub(-5, -1) == "FRAME" then
        Controls[control].Value = value
      elseif parameter == "PLAY MODE" then
        local key = get_table_key(play_mode_keys, play_mode_values, value)
        Controls[control].String = key
      elseif parameter == "FRAMING MODE" then
        local key = get_table_key(framing_mode_keys, framing_mode_values, value)
        Controls[control].String = key
      elseif parameter == "BLEND MODE" then
        local key = get_table_key(blend_mode_keys, blend_mode_values, value)
        Controls[control].String = key
      elseif parameter == "TRANSITION MODE" then
        local key = get_table_key(transition_mode_keys, transition_mode_values, value)
        Controls[control].String = key
      elseif parameter == "FX1 SELECT" then
        local key = get_table_key(fx_keys, fx_values, value)
        Controls[control].String = key
      elseif parameter == "FX2 SELECT" then
        local key = get_table_key(fx_keys, fx_values, value)
        Controls[control].String = key
      elseif parameter == "PLAY SPEED" or parameter == "SCALE" then
        if value >= 0.5 then
          Controls[control].Position = (value - 0.4444444444444444) / 0.5555555555555556
        else
          Controls[control].Position = value / 5
        end
      elseif parameter:sub(1, 3) == "MTC" then
        Controls[control].Value = value
      elseif parameter:sub(1, 8) == "POSITION" then
        Controls[control].Value = (value * 200) - 100
      elseif parameter:sub(1, 8) == "ROTATION" then
        Controls[control].Value = (value * 2880) - 1440
      elseif parameter:sub(1, 19) == "TRANSITION DURATION" then
        Controls[control].Value = value
      elseif
        parameter == "RED" or parameter == "BLUE" or parameter == "GREEN" or parameter == "SATURATION" or
          parameter == "CONTRAST"
       then
        Controls[control].Value = (value * 200) - 100
      else -- parameters where data directly proportional to position
        Controls[control].Position = value
      end
    else
      fn_log_error("Unknown layer parameter: " .. path)
    end
  end
end

function fn_process_JSON_update(path, value)
  fn_log_debug("Processing JSON update: " .. path)
  if path == "/System Settings" then
    fn_update_info()
  elseif path == "/Media List" then
    local file_choice_list = {}
    for _, file in ipairs(value.files) do
      file_list[file.name] = file.fileIndex - 1
      table.insert(file_choice_list, file.name)
      file_metadata_list[file.name] = file
      for i = 1, layer_count do
        if Controls[string.format("media_name_%s_layer_%s", file.fileIndex, i)] then
          Controls[string.format("media_name_%s_layer_%s", file.fileIndex, i)].String = file.name
        end
      end
      fn_get_file_thumbnail(file.fileIndex, file.name)
    end
    for i = 1, layer_count do
      Controls["file_select_" .. i].Choices = file_choice_list
    end
    -- let's update the system info as storage and num files might have changed
    fn_update_info()
  elseif path == "/Output Mapping" then
  elseif path == "/Play List" then
    fn_log_debug("Playlist updated, total items: " .. tostring(value.list and #value.list or 0) .. ", enabled: " .. tostring(value.usePlayList))
    if value.usePlayList and value.usePlayList == 1 then
      Controls.playlist_enable.Boolean = true
    else
      Controls.playlist_enable.Boolean = false
    end
    playlist_row_count = value.list and #value.list or 0
    Controls.playlist_rows.Value = playlist_row_count
  elseif path == "/Timecode Cue List" then
    fn_log_debug("Timecode Cue List updated, layer 1 items: " .. tostring(value.layers[1] and #(value.layers[1].list) or 0) .. ", layer 2 items: " .. tostring(value.layers[2] and #(value.layers[2].list) or 0) .. ", layer 1 enabled: " .. tostring(value.layers[1] and value.layers[1].useCueList == 1) .. ", layer 2 enabled: " .. tostring(value.layers[2] and value.layers[2].useCueList == 1))
    if value.layers[1] and value.layers[1].useCueList == 1 then
      Controls.l1_timecode_enable.Boolean = true
    else
      Controls.l1_timecode_enable.Boolean = false
    end
    if value.layers[2] and value.layers[2].useCueList == 1 then
      Controls.l2_timecode_enable.Boolean = true
    else
      Controls.l2_timecode_enable.Boolean = false
    end
    Controls.l1_tc_rows.Value = value.layers[1] and #(value.layers[1].list) or 0
    Controls.l2_tc_rows.Value = value.layers[2] and #(value.layers[2].list) or 0
  elseif path == "/Schedule" then
    fn_log_debug("Schedule updated, enabled: " .. tostring(value.useSchedule))
    if value.useSchedule and value.useSchedule == 1 then
      Controls.schedule_enable.Boolean = true
    else
      Controls.schedule_enable.Boolean = false
    end
  elseif path == "/Timeline" then
    fn_log_debug("Timeline updated, enabled: " .. tostring(value.useTimeline))
    if value.useTimeline and value.useTimeline == 1 then
      Controls.timeline_enable.Boolean = true
    else
      Controls.timeline_enable.Boolean = false
    end
  elseif path == "/Vioso WB Settings" then
  elseif path == "/Screenberry WB Settings" then
  end
end

function fn_update_info()
  if wsConnected ~= true then
    return
  end
  fn_log_debug("Updating device info")
  local url = string.format("http://%s/api/getTileList", ip_address)
  HttpClient.Post {
    Url = url,
    Data = rapidjson.encode({}), -- This can be anything
    Headers = {
      ["Content-Type"] = "application/json"
    },
    EventHandler = function(tbl, code, data, error, headers)
      if code == 200 then
        local info = rapidjson.decode(data)
        fn_log_debug("Device info received")
        Controls.version.String = info.hiveVersion

        if info and info.tileList then
          local device = nil
          for _, tile in ipairs(info.tileList) do
            if fn_compare_ips(tile.ipAddress, ip_address) then
              device = tile
              break
            end
          end
          if device then
            Controls.device_name.String = device.deviceName
            Controls.ip_address.String = device.ipAddress
            Controls.netmask.String = device.netMask
            Controls.status.String = device.status
            Controls.output_framerate.String = device.rate
            Controls.output_resolution.String = string.format("%s x %s", device.resX, device.resY)
            Controls.serial.String = device.serial
            Controls.bee_type.String = (device.beeType == 1) and "Queen" or "Worker"
            Controls.file_count.String = device.nFiles
            Controls.cpu_power.String = device.power
            Controls.free_space.String = string.format("%.2f GB", tonumber(device.space) / (1024 * 1024 * 1024))
          end
        end
      else
        fn_log_error("Failed to get device info: HTTP " .. tostring(code))
      end
    end
  }
end

function fn_get_file_thumbnail(index, filename)
  if wsConnected ~= true then
    return
  end
  if index <= media_item_count then
    fn_log_debug("Requesting thumbnail for media index " .. tostring(index) .. ", file: " .. filename)
    HttpClient.Download {
      Url = string.format("http://%s/Thumbs/%s", ip_address, filename:gsub("%.%w+", ".jpg")),
      Headers = {},
      Auth = "basic",
      Timeout = 10,
      EventHandler = function(tbl, code, data, err, headers)
        if code == 200 then
          local iconStyle = {
            DrawChrome = true,
            HorizontalAlignment = "Center",
            Legend = "",
            Padding = -12,
            Margin = 0,
            IconData = Qlib.base64_enc(data)
          }
          for i = 1, layer_count do
            Controls[string.format("media_thumbnail_%s_layer_%s", index, i)].Style = rapidjson.encode(iconStyle)
          end
        end
      end
    }
  else
    fn_log_error("Thumbnail index " .. tostring(index) .. " exceeds media item count of " .. tostring(media_item_count))
  end
end

function fn_update_media_folders()
  if wsConnected ~= true then
    return
  end
  fn_log_debug("Updating media folder list")
  url = string.format("http://%s/api/getMediaFoldersList", ip_address)
  HttpClient.Post {
    Url = url,
    Data = rapidjson.encode({}), -- This can be anything
    Headers = {
      ["Content-Type"] = "application/json"
    },
    EventHandler = function(tbl, code, data, error, headers)
      if code == 200 then
        fn_log_debug("Media folder list received")
        local folders = rapidjson.decode(data)
        folder_list = {
          ["MEDIA"] = 0 -- Default folder
        }
        local index = 1
        for _, folder in pairs(folders.folders) do
          folder_list[folder] = index
          index = index + 1
        end
        folder_choices = {}
        for k, v in pairs(folder_list) do
          table.insert(folder_choices, k)
        end
        for i = 1, layer_count do
          Controls["folder_select_" .. i].Choices = folder_choices
        end
      else
        fn_log_error("Failed to get media folder list: HTTP " .. tostring(code))
      end
    end
  }
end

function cmd_file_select(layer, x) -- 0..65535: File Select
  if file_metadata_list[Controls["file_select_" .. layer].String] then
    Controls["duration_" .. layer].String =
      os.date("!%X", math.floor(file_metadata_list[Controls["file_select_" .. layer].String].duration))
    fn_send(layer, "FILE SELECT", x)
  end
end

function cmd_folder_select(layer, x) -- 0..65535: Folder Select
  fn_send(layer, "FOLDER SELECT", x)
end

function cmd_intensity(layer, x)
  fn_send(layer, "INTENSITY", x)
end

function cmd_in_frame(layer, x)
  fn_send(layer, "IN FRAME", x)
end

function cmd_out_frame(layer, x)
  fn_send(layer, "OUT FRAME", x)
end

function cmd_play_mode(layer, x)
  fn_send(layer, "PLAY MODE", x)
end

function cmd_framing(layer, x)
  fn_send(layer, "FRAMING MODE", x)
end

function cmd_blend_mode(layer, x)
  fn_send(layer, "BLEND MODE", x)
end

function cmd_lut_select(layer, x)
  fn_send(layer, "LUT", x)
end

function cmd_play_speed(layer, x)
  fn_send(layer, "PLAY SPEED", x)
end

function cmd_movement_speed(layer, x)
  fn_send(layer, "MOVEMENT SPEED", x)
end

function cmd_tc_hour(layer, x)
  fn_send(layer, "MTC HOUR", x)
end

function cmd_tc_minute(layer, x)
  fn_send(layer, "MTC MINUTE", x)
end

function cmd_tc_second(layer, x)
  fn_send(layer, "MTC SECOND", x)
end

function cmd_tc_frame(layer, x)
  fn_send(layer, "MTC FRAME", x)
end

function cmd_scale(layer, x)
  fn_send(layer, "SCALE", x)
end

function cmd_aspect_ratio(layer, x)
  fn_send(layer, "ASPECT RATIO", x)
end

function cmd_position_x(layer, x)
  fn_send(layer, "POSITION X", x)
end

function cmd_position_y(layer, x)
  fn_send(layer, "POSITION Y", x)
end

function cmd_rotation_x(layer, x)
  fn_send(layer, "ROTATION X", x)
end

function cmd_rotation_y(layer, x)
  fn_send(layer, "ROTATION Y", x)
end

function cmd_rotation_z(layer, x)
  fn_send(layer, "ROTATION Z", x)
end

function cmd_red(layer, x)
  fn_send(layer, "RED", x)
end

function cmd_green(layer, x)
  fn_send(layer, "GREEN", x)
end

function cmd_blue(layer, x)
  fn_send(layer, "BLUE", x)
end

function cmd_hue(layer, x)
  fn_send(layer, "HUE", x)
end

function cmd_saturation(layer, x)
  fn_send(layer, "SATURATION", x)
end

function cmd_contrast(layer, x)
  fn_send(layer, "CONTRAST", x)
end

function cmd_strobe(layer, x)
  fn_send(layer, "STROBE", x)
end

function cmd_volume(layer, x)
  fn_send(layer, "VOLUME", x)
end

function cmd_transition_duration(layer, x)
  fn_send(layer, "TRANSITION DURATION", x)
end

function cmd_transition_mode(layer, x)
  fn_send(layer, "TRANSITION MODE", x)
end

function cmd_enable_playlist(x)
  fn_update_json("Play List", {{op = "replace", path = "/usePlayList", value = x}})
end

function cmd_enable_timeline(x)
  fn_update_json("Timeline", {{op = "replace", path = "/useTimeline", value = x}})
end

function cmd_enable_schedule(x)
  fn_update_json("Schedule", {{op = "replace", path = "/useSchedule", value = x}})
end

function cmd_enable_tc1(x)
  fn_update_json("Timecode Cue List", {{op = "replace", path = "/layers/0/useCueList", value = x}})
end

function cmd_enable_tc2(x)
  fn_update_json("Timecode Cue List", {{op = "replace", path = "/layers/1/useCueList", value = x}})
end

function cmd_playlist_play_previous()
  if playlist_row_count > 0 then
    local new_row = playlist_active_row - 1
    if new_row < 1 then
      new_row = playlist_row_count
    end
    setPatchDouble("/Playlist Control/Playlist Controller 1/Play List Next", new_row - 1)
  end
end

function cmd_playlist_play_next()
  if playlist_row_count > 0 then
    local new_row = playlist_active_row + 1
    if new_row > playlist_row_count then
      new_row = 1
    end
    setPatchDouble("/Playlist Control/Playlist Controller 1/Play List Next", new_row - 1)
  end
end

function cmd_playlist_play_first()
  if playlist_row_count > 0 then
    local new_row = 1
    setPatchDouble("/Playlist Control/Playlist Controller 1/Play List Next", new_row - 1)
  end
end

function cmd_playlist_play_last()
  if playlist_row_count > 0 then
    local new_row = playlist_row_count
    setPatchDouble("/Playlist Control/Playlist Controller 1/Play List Next", new_row - 1)
  end
end

function cmd_playlist_play_row(x)
  if playlist_row_count > 0 then
    local new_row = x
    if new_row < 1 then
      new_row = 1
    end
    if new_row > playlist_row_count then
      new_row = playlist_row_count
    end
    setPatchDouble("/Playlist Control/Playlist Controller 1/Play List Next", new_row - 1)
  end
end

function cmd_restart()
  if wsConnected ~= true then
    return
  end
  fn_log_message("Sending restart command to device")
  local url = string.format("http://%s/api/runSystemCommand", ip_address)
  HttpClient.Post {
    Url = url,
    Data = rapidjson.encode(
      {
        method = "Nectar_run_command",
        cmd = "sudo reboot"
      }
    ), -- This can be anything
    Headers = {
      ["Content-Type"] = "application/json"
    },
    EventHandler = function(tbl, code, data, error, headers)
      if code == 200 then
        fn_log_message("Restart command sent")
      else
        fn_log_error("Failed to send restart command: HTTP " .. tostring(code))
      end
    end
  }
end

function cmd_shutdown()
  if wsConnected ~= true then
    return
  end
  fn_log_message("Sending shutdown command to device")
  local url = string.format("http://%s/api/runSystemCommand", ip_address)
  HttpClient.Post {
    Url = url,
    Data = rapidjson.encode(
      {
        method = "Nectar_run_command",
        cmd = "sudo shutdown -h now"
      }
    ), -- This can be anything
    Headers = {
      ["Content-Type"] = "application/json"
    },
    EventHandler = function(tbl, code, data, error, headers)
      if code == 200 then
        fn_log_message("Shutdown command sent")
      else
        fn_log_error("Failed to send shutdown command: HTTP " .. tostring(code))
      end
    end
  }
end

for i = 1, 2 do
  _G["cmd_fx" .. i .. "_select"] = function(layer, x)
    fn_send(layer, "FX" .. i .. " SELECT", x)
  end
  _G["cmd_fx" .. i .. "_opacity"] = function(layer, x)
    fn_send(layer, "FX" .. i .. " OPACITY", x)
  end
  for p = 1, 16 do
    _G["cmd_fx" .. i .. "_param_" .. p] = function(layer, x)
      fn_send(layer, "FX" .. i .. " PARAM " .. p, x)
    end
  end
end

-- Set up seek timers and last value trackers
for layer, seek_timer in pairs(seek_timer_list) do
  seek_timer.EventHandler = function(timer)
    if Controls[string.format("seek_%s", layer)].String == seek_last_value[layer] then
      if Controls["file_select_" .. layer].String ~= "" then
        local frame =
          math.floor(
          file_metadata_list[Controls["file_select_" .. layer].String].duration *
            file_metadata_list[Controls["file_select_" .. layer].String].rate *
            Controls["seek_" .. layer].Position
        )
        -- Seek to desired frame
        local path = string.format("/LAYER %s/Transport Control/MediaClockGenerator/Seek", layer)
        setPatchDouble(path, frame)
      end
      seek_timer_list[layer]:Stop()
    end
    seek_last_value[layer] = Controls[string.format("seek_%s", layer)].String
  end
end

-- Set up event handlers for controls
fn_log_debug("Setting up control event handlers")
for i = 1, layer_count do
  Controls["file_select_" .. i].EventHandler = function()
    cmd_file_select(i, file_list[Controls["file_select_" .. i].String])
  end
  Controls["folder_select_" .. i].EventHandler = function()
    cmd_folder_select(i, folder_list[Controls["folder_select_" .. i].String])
  end
  Controls["intensity_" .. i].EventHandler = function()
    cmd_intensity(i, Controls["intensity_" .. i].Position)
  end
  Controls["in_frame_" .. i].EventHandler = function()
    cmd_in_frame(i, Controls["in_frame_" .. i].Value)
  end
  Controls["out_frame_" .. i].EventHandler = function()
    cmd_out_frame(i, Controls["out_frame_" .. i].Value)
  end
  Controls["play_mode_" .. i].EventHandler = function()
    local val = get_table_value(play_mode_keys, play_mode_values, Controls["play_mode_" .. i].String)
    cmd_play_mode(i, val)
  end
  Controls["framing_mode_" .. i].EventHandler = function()
    local val = get_table_value(framing_mode_keys, framing_mode_values, Controls["framing_mode_" .. i].String)
    cmd_framing(i, val)
  end
  Controls["blend_mode_" .. i].EventHandler = function()
    local val = get_table_value(blend_mode_keys, blend_mode_values, Controls["blend_mode_" .. i].String)
    cmd_blend_mode(i, val)
  end
  Controls["fx1_select_" .. i].EventHandler = function()
    local val = get_table_value(fx_keys, fx_values, Controls["fx1_select_" .. i].String)
    cmd_fx1_select(i, val)
  end
  Controls["fx2_select_" .. i].EventHandler = function()
    local val = get_table_value(fx_keys, fx_values, Controls["fx2_select_" .. i].String)
    cmd_fx2_select(i, val)
  end
  Controls["lut_" .. i].EventHandler = function()
    cmd_lut_select(i, lut_list[Controls["lut_" .. i].String])
  end
  Controls["play_speed_" .. i].EventHandler = function()
    local converted_value = Controls["play_speed_" .. i].Position
    if Controls["play_speed_" .. i].Position >= 0.1 then
      converted_value = 0.5555555555555556 * Controls["play_speed_" .. i].Position + 0.4444444444444444
    else
      converted_value = 5 * Controls["play_speed_" .. i].Position
    end
    cmd_play_speed(i, converted_value)
  end
  Controls["move_speed_" .. i].EventHandler = function()
    -- reserved for future use
    cmd_movement_speed(i, Controls["movement_speed_" .. i].Position)
  end
  Controls["mtc_hour_" .. i].EventHandler = function()
    cmd_tc_hour(i, Controls["mtc_hour_" .. i].Value)
  end
  Controls["mtc_minute_" .. i].EventHandler = function()
    cmd_tc_minute(i, Controls["mtc_minute_" .. i].Value)
  end
  Controls["mtc_second_" .. i].EventHandler = function()
    cmd_tc_second(i, Controls["mtc_second_" .. i].Value)
  end
  Controls["mtc_frame_" .. i].EventHandler = function()
    cmd_tc_frame(i, Controls["mtc_frame_" .. i].Value)
  end
  Controls["scale_" .. i].EventHandler = function()
    local converted_value = Controls["scale_" .. i].Position
    if Controls["scale_" .. i].Position >= 0.1 then
      converted_value = 0.5555555555555556 * Controls["scale_" .. i].Position + 0.4444444444444444
    else
      converted_value = 5 * Controls["scale_" .. i].Position
    end
    cmd_scale(i, converted_value)
  end
  Controls["aspect_ratio_" .. i].EventHandler = function()
    cmd_aspect_ratio(i, Controls["aspect_ratio_" .. i].Position)
  end
  Controls["position_x_" .. i].EventHandler = function()
    cmd_position_x(i, (Controls["position_x_" .. i].Value + 100) / 200)
  end
  Controls["position_y_" .. i].EventHandler = function()
    cmd_position_y(i, (Controls["position_y_" .. i].Value + 100) / 200)
  end
  Controls["rotation_x_" .. i].EventHandler = function()
    cmd_rotation_x(i, (Controls["rotation_x_" .. i].Value + 1440) / 2880)
  end
  Controls["rotation_y_" .. i].EventHandler = function()
    cmd_rotation_y(i, (Controls["rotation_y_" .. i].Value + 1440) / 2880)
  end
  Controls["rotation_z_" .. i].EventHandler = function()
    cmd_rotation_z(i, (Controls["rotation_z_" .. i].Value + 1440) / 2880)
  end
  Controls["red_" .. i].EventHandler = function()
    cmd_red(i, (Controls["red_" .. i].Value + 100) / 200)
  end
  Controls["green_" .. i].EventHandler = function()
    cmd_green(i, (Controls["green_" .. i].Value + 100) / 200)
  end
  Controls["blue_" .. i].EventHandler = function()
    cmd_blue(i, (Controls["blue_" .. i].Value + 100) / 200)
  end
  Controls["hue_" .. i].EventHandler = function()
    cmd_hue(i, Controls["hue_" .. i].Position)
  end
  Controls["saturation_" .. i].EventHandler = function()
    cmd_saturation(i, (Controls["saturation_" .. i].Value + 100) / 200)
  end
  Controls["contrast_" .. i].EventHandler = function()
    cmd_contrast(i, (Controls["contrast_" .. i].Value + 100) / 200)
  end
  Controls["strobe_" .. i].EventHandler = function()
    cmd_strobe(i, Controls["strobe_" .. i].Position)
  end
  Controls["volume_" .. i].EventHandler = function()
    cmd_volume(i, Controls["volume_" .. i].Position)
  end
  Controls["seek_" .. i].EventHandler = function()
    seek_timer_list[i]:Start(.2)
  end
  Controls["transition_duration_" .. i].EventHandler = function()
    cmd_transition_duration(i, Controls["transition_duration_" .. i].Value)
  end
  Controls["transition_mode_" .. i].EventHandler = function()
    local val = get_table_value(transition_mode_keys, transition_mode_values, Controls["transition_mode_" .. i].String)
    cmd_transition_mode(i, val)
  end
  Controls["fx1_opacity_" .. i].EventHandler = function()
    _G["cmd_fx1_opacity"](i, Controls["fx1_opacity_" .. i].Position)
  end
  Controls["fx2_opacity_" .. i].EventHandler = function()
    _G["cmd_fx2_opacity"](i, Controls["fx2_opacity_" .. i].Position)
  end
  for p = 1, 16 do
    Controls[string.format("fx1_param_%s_%s", p, i)].EventHandler = function()
      _G["cmd_fx1_param_" .. p](i, Controls[string.format("fx1_param_%s_%s", p, i)].Position)
    end
    Controls[string.format("fx2_param_%s_%s", p, i)].EventHandler = function()
      _G["cmd_fx2_param_" .. p](i, Controls[string.format("fx2_param_%s_%s", p, i)].Position)
    end
  end

  for p = 1, media_item_count do
    Controls[string.format("media_thumbnail_%s_layer_%s", p, i)].EventHandler = function()
      if Controls[string.format("media_name_%s_layer_%s", p, i)].String ~= nil then
        cmd_file_select(i, file_list[Controls[string.format("media_name_%s_layer_%s", p, i)].String])
      end
    end
  end
end

Controls["playlist_enable"].EventHandler = function()
  cmd_enable_playlist(Controls.playlist_enable.Boolean and 1 or 0)
end
Controls["timeline_enable"].EventHandler = function()
  cmd_enable_timeline(Controls.timeline_enable.Boolean and 1 or 0)
end
Controls["schedule_enable"].EventHandler = function()
  cmd_enable_schedule(Controls.schedule_enable.Boolean and 1 or 0)
end
Controls["l1_timecode_enable"].EventHandler = function()
  cmd_enable_tc1(Controls.l1_timecode_enable.Boolean and 1 or 0)
end
Controls["l2_timecode_enable"].EventHandler = function()
  cmd_enable_tc2(Controls.l2_timecode_enable.Boolean and 1 or 0)
end
Controls["playlist_play_previous"].EventHandler = function()
  cmd_playlist_play_previous()
end
Controls["playlist_play_next"].EventHandler = function()
  cmd_playlist_play_next()
end
Controls["playlist_play_first"].EventHandler = function()
  cmd_playlist_play_first()
end
Controls["playlist_play_last"].EventHandler = function()
  cmd_playlist_play_last()
end
Controls["playlist_play_row"].EventHandler = function()
  if Controls.playlist_play_row_index.String ~= "" then
    local row = tonumber(Controls.playlist_play_row_index.String)
    if row then
      cmd_playlist_play_row(row)
    end
  end
end
Controls["system_shutdown"].EventHandler = function()
  cmd_shutdown()
end
Controls["system_restart"].EventHandler = function()
  cmd_restart()
end

-- Initialize combobox choices
for i = 1, layer_count do
  Controls["play_mode_" .. i].Choices = play_mode_keys
  Controls["framing_mode_" .. i].Choices = framing_mode_keys
  Controls["blend_mode_" .. i].Choices = blend_mode_keys
  Controls["transition_mode_" .. i].Choices = transition_mode_keys
  Controls["fx1_select_" .. i].Choices = fx_keys
  Controls["fx2_select_" .. i].Choices = fx_keys
end

fn_update_media_folders()

-- Connect
if fn_check_valid_ip(ip_address) then
  fn_log_message("Connecting to Hive player at " .. ip_address)
  Connect(ip_address, fn_hive_connect_Status)
  fn_poll_info()
else
  fn_log_error("Invalid IP address: " .. ip_address)
end
end
