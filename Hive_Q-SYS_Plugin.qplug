-- Information block for the plugin
PluginInfo = {
  Name = "Hive~Beeblade",
  Version = "0.0",
  BuildVersion = "0.0.0.8",
  Id = "c88de492-bccb-49bb-9927-852367b9eb16",
  Author = "Carrier Labs & Hive",
  Description = "Plugin to control Hive Beeblade, Beebox and Nexus devices" ,
  ShowDebug = true 
}
local udp_port = 8083
local layer_count = 2
local max_media_items = 120

local Colors = {
  hive_yellow = {255, 215, 0},
  hive_grey = {56, 56, 59},
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  transparent = {0, 0, 0, 0},
  control_label = {0, 0, 0}
}

local control_list = {
  ["File Select"] = {
    Name = "file_select_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Folder Select"] = {
    Name = "folder_select_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Time Elapsed"] = {
    Name = "time_elapsed_",
    ControlType = "Indicator",
    IndicatorType = "Text",
    PinStyle = "Output",
    UserPin = true
  },
  ["Duration"] = {
    Name = "duration_",
    ControlType = "Indicator",
    IndicatorType = "Text",
    PinStyle = "Output",
    UserPin = true
  },
  ["Seek"] = {
    Name = "seek_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Fader",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Intensity"] = {
    Name = "intensity_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["In Frame"] = {
    Name = "in_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 9999999,
    PinStyle = "Both",
    UserPin = true
  },
  ["Out Frame"] = {
    Name = "out_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 9999999,
    PinStyle = "Both",
    UserPin = true
  },
  ["Play Mode"] = {
    Name = "play_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Framing Mode"] = {
    Name = "framing_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Blend Mode"] = {
    Name = "blend_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["LUT"] = {
    Name = "lut_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  },
  ["Play Speed"] = {
    Name = "play_speed_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 1000,
    PinStyle = "Both",
    UserPin = true
  },
  ["Move Speed"] = {
    Name = "move_speed_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Hour"] = {
    Name = "mtc_hour_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 23,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Minute"] = {
    Name = "mtc_minute_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Second"] = {
    Name = "mtc_second_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["MTC Frame"] = {
    Name = "mtc_frame_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 59,
    PinStyle = "Both",
    UserPin = true
  },
  ["Scale"] = {
    Name = "scale_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 1000,
    PinStyle = "Both",
    UserPin = true
  },
  ["Aspect Ratio"] = {
    Name = "aspect_ratio_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Position X"] = {
    Name = "position_x_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Position Y"] = {
    Name = "position_y_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation X"] = {
    Name = "rotation_x_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation Y"] = {
    Name = "rotation_y_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Rotation Z"] = {
    Name = "rotation_z_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -1440,
    Max = 1440,
    PinStyle = "Both",
    UserPin = true
  },
  ["Red"] = {
    Name = "red_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Green"] = {
    Name = "green_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Blue"] = {
    Name = "blue_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Hue"] = {
    Name = "hue_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Saturation"] = {
    Name = "saturation_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Contrast"] = {
    Name = "contrast_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = -100,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Strobe"] = {
    Name = "strobe_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Volume"] = {
    Name = "volume_",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Style = "Text Field",
    Min = 0,
    Max = 100,
    PinStyle = "Both",
    UserPin = true
  },
  ["Transition Duration"] = {
    Name = "transition_duration_",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Style = "Text Field",
    Min = 0,
    Max = 65535,
    PinStyle = "Both",
    UserPin = true
  },
  ["Transition Mode"] = {
    Name = "transition_mode_",
    ControlType = "Text",
    Style = "ComboBox",
    PinStyle = "Both",
    UserPin = true
  }
}

--[[ 
local parameter_list = {} -- this results in random order indexing
for k,v in pairs(control_list) do
  table.insert(parameter_list, k)
end
]]
local parameter_list = {
  "Folder Select",
  "File Select",
  "Time Elapsed",
  "Duration",
  "Seek",
  "Intensity",
  "In Frame",
  "Out Frame",
  "Play Mode",
  "Framing Mode",
  "Blend Mode",
  "LUT",
  "Play Speed",
  "Move Speed",
  "MTC Hour",
  "MTC Minute",
  "MTC Second",
  "MTC Frame",
  "Scale",
  "Aspect Ratio",
  "Position X",
  "Position Y",
  "Rotation X",
  "Rotation Y",
  "Rotation Z",
  "Red",
  "Green",
  "Blue",
  "Hue",
  "Saturation",
  "Contrast",
  "Strobe",
  "Volume",
  "Transition Duration",
  "Transition Mode"
}
-- Define the color of the plugin object in the design
function GetColor(props)
  return {102, 102, 102}
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Hive " .. props["Model"].Value .. " " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = {"Setup", "Media List"}
function GetPages(props)
  local pages = {}
  
  for i=1, layer_count do
    --table.insert(PageNames, "Layer " .. i .. " Parameters")
  end
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Player_3" } )
  end
  return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(
    props,
    {
      Name = "IP Address",
      Type = "string",
      Value = "192.168.1.30"
    }
  )
  
  table.insert(
    props,
    {
      Name = "Model",
      Type = "enum",
      Choices = {"PLAYER_1", "PLAYER_2", "PLAYER_3", "PLAYER_4"},
      Value = "PLAYER_3"
    }
  )
  
  table.insert(
    props,
    {
      Name = "Media List Count",
      Type = "integer",
      Value = 10,
      Min = 1,
      Max = 120
    }
  )
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  -- No Pins!
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  print("Rectify Properties Called ")
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  -- No components!
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  -- No Wiring!
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(
    ctrls,
    {
      Name = "online",
      ControlType = "Indicator",
      IndicatorType = "Led",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ip_address",
      ControlType = "Text",
      --IndicatorType = "Text",
      PinStyle = "Both",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "device_name",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "thumbnail",
      ControlType = "Button",
      ButtonType = "Momentary",
      PinStyle = "Output",
      Count = 1,
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "test",
      ControlType = "Button",
      ButtonType = "Momentary",
      PinStyle = "Input",
      Count = 1,
      UserPin = true
    }
  )
  
  for i = 1, layer_count do
    for k, v in pairs(control_list) do
      table.insert(
        ctrls,
        {
          Name = v.Name .. i,
          ControlType = v.ControlType,
          ControlUnit = v.ControlUnit,
          Min = v.Min,
          Max = v.Max,
          PinStyle = v.PinStyle,
          UserPin = v.UserPin
        }
      )
    end
    for p = 1, max_media_items do
      table.insert(
        ctrls,
        {
          Name = string.format("media_name_%s_layer_%s", p, i),
          ControlType = "Indicator",
          IndicatorType = "Text",
          PinStyle = "Output",
          UserPin = true
        }
      )
      table.insert(
        ctrls,
        {
          Name = string.format("media_thumbnail_%s_layer_%s", p, i),
          ControlType = "Button",
          ButtonType = "StateTrigger",
          Min = 0,
          Max = 1,
          PinStyle = "None",
          UserPin = false
        }
      )
    end
  end
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  local media_item_count = props["Media List Count"].Value
  
  local column_size = 11
  
  local btn_size = {32, 24}
  local status_groupbox_size = {9 * btn_size[1], 4 * btn_size[2]}
  local player_groupbox_position = {0, status_groupbox_size[2] + (0.5 * btn_size[2])}
  local player_groupbox_size = {
    (((math.floor((#parameter_list / column_size)) + 1) * 6) + 1) * btn_size[1],
    (column_size + 2) * btn_size[2]
  }
  local preview_size = {3 * btn_size[1], (3 * btn_size[1])}
  local media_list_groupbox_size = {3 * preview_size[1], (media_item_count + 1) * preview_size[2]}
  
  if CurrentPage then
    if CurrentPage == "Setup" then
      table.insert(
        graphics,
        {
          Type = "GroupBox",
          Text = "Setup",
          HTextAlign = "Left",
          CornerRadius = 8,
          Fill = Colors.hive_grey,
          StrokeWidth = 1,
          Position = {0, 0},
          Size = status_groupbox_size
        }
      )
      --[[table.insert(
        graphics,
        {
          Type = "Jpeg",
          Image = "images/logo.jpg", -- TODO
          Position = {21, 34},
          Size = {115, 36}
        }
      )]]
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = "Online:",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Bold",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {0, (0.5 * btn_size[2])},
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = "IP Address:",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Bold",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {0, (1.5 * btn_size[2])},
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = "Device Name:",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Bold",
          HTextAlign = "Right",
          Color = Colors.control_label,
          Position = {0, (2.5 * btn_size[2])},
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
      layout["online"] = {
        PrettyName = "System~Online",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {3 * btn_size[1], (0.5 * btn_size[2])},
        Size = {btn_size[2], btn_size[2]}
      }
      layout["ip_address"] = {
        PrettyName = "System~IP Address",
        Style = "TextBox",
        Position = {3 * btn_size[1], (1.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
      layout["device_name"] = {
        PrettyName = "System~Device Name",
        Style = "TextBox",
        Position = {3 * btn_size[1], (2.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      }
      layout["test"] = {
        PrettyName = "Test",
        Style = "Button",
        Position = {7 * btn_size[1], (2.5 * btn_size[2])},
        Size = {1 * btn_size[1], btn_size[2]}
      }
  
      for i = 1, layer_count do
        table.insert(
          graphics,
          {
            Type = "GroupBox",
            Text = "Layer " .. i,
            HTextAlign = "Left",
            CornerRadius = 8,
            Fill = Colors.hive_grey,
            StrokeWidth = 1,
            Position = {
              player_groupbox_position[1],
              player_groupbox_position[2] + ((i - 1) * (player_groupbox_size[2] + (0.5 * btn_size[2])))
            },
            Size = player_groupbox_size
          }
        )
        for k, v in pairs(parameter_list) do
          local column = math.floor((k - 1) / column_size) + 1
          local row = k - (column - 1) * column_size
          table.insert(
            graphics,
            {
              Type = "Text",
              Text = v .. ":",
              Font = "Roboto",
              FontSize = 12,
              FontStyle = "Bold",
              HTextAlign = "Right",
              Color = Colors.hive_yellow,
              Position = {
                player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)),
                player_groupbox_position[2] +
                  ((i - 1) * (player_groupbox_size[2] + (0.5 * btn_size[2])) + (row * btn_size[2]))
              },
              Size = {3 * btn_size[1], btn_size[2]}
            }
          )
          layout[control_list[v].Name .. i] = {
            PrettyName = "Layer " .. i .. "~" .. v,
            Style = control_list[v].Style,
            Position = {
              player_groupbox_position[1] + ((6 * btn_size[1]) * (column - 1)) + (3 * btn_size[1]),
              player_groupbox_position[2] +
                ((i - 1) * (player_groupbox_size[2] + (0.5 * btn_size[2])) + (row * btn_size[2]))
            },
            Size = {3 * btn_size[1], btn_size[2]}
          }
        end
      end
    elseif CurrentPage == "Media List" then
      table.insert(
        graphics,
        {
          Type = "GroupBox",
          Text = "Media List",
          HTextAlign = "Left",
          CornerRadius = 8,
          Fill = Colors.hive_grey,
          StrokeWidth = 1,
          Position = {0, 0},
          Size = media_list_groupbox_size
        }
      )
      table.insert(
        graphics,
        {
          Type = "Text",
          Text = "File Name",
          Font = "Roboto",
          FontSize = 12,
          FontStyle = "Bold",
          HTextAlign = "Right",
          Color = Colors.hive_yellow,
          Position = {0, (1 * btn_size[2])},
          Size = {3 * btn_size[1], btn_size[2]}
        }
      )
  
      for i = 1, layer_count do
        table.insert(
          graphics,
          {
            Type = "Text",
            Text = string.format("Layer %s\nClip Select", i),
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Centre",
            Color = Colors.hive_yellow,
            Position = {i * 3 * btn_size[1], (1 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
          }
        )
        for p = 1, media_item_count do
          layout[string.format("media_name_%s_layer_%s", p, i)] = {
            PrettyName = string.format("Layer %s~Media List~%s~Name", i, p),
            Style = "TextBox",
            Position = {
              0 * btn_size[1],
              (2 * btn_size[2]) + ((p - 1) * preview_size[2]) + (preview_size[2] / 2) - (btn_size[2] / 2)
            },
            Size = {3 * btn_size[1], btn_size[2]}
          }
          layout[string.format("media_thumbnail_%s_layer_%s", p, i)] = {
            PrettyName = string.format("Layer %s~Media List~%s~Select", i, p),
            UnlinkOffColor = true,
            OffColor = Colors.transparent,
            Color = Colors.hive_yellow,
            StrokeColor = Colors.hive_yellow,
            Position = {i * 3 * btn_size[1], (2 * btn_size[2]) + ((p - 1) * preview_size[2])},
            Size = preview_size
          }
        end
      end
    --elseif string.find(CurrentPage, "Layer (%d+) Parameters") then
    --i = string.match(CurrentPage, "Layer (%d+) Parameters")
    end
  end
  return layout, graphics
end

--Start event based logic
if Controls then
local file_list = {}
local selected_file = {}
local file_metadata_list = {}
local play_mode = {}
local seek_timer_list = {}
local seek_last_value = {}

for i = 1, layer_count do
  play_mode[i] = "In Frame"
  selected_file[i] = ""
  saved_play_mode = {}
  seek_timer_list[i] = Timer.New()
end

local media_item_count = Properties["Media List Count"].Value

local folder_list = {
  ["MEDIA"] = 0
}

local folder_choices = {}
for k, v in pairs(folder_list) do
  table.insert(folder_choices, k)
end

local lut_list = {
  ["NONE"] = 0
}
local lut_choices = {}
for k, v in pairs(lut_list) do
  table.insert(lut_choices, k)
end

-- Key and Value arrays to be used with all ENUM based controls, separating the keys and values
-- is the easiest way to maintain order

local play_mode_keys = {
  "In Frame",
  "Out Frame",
  "Loop Forward",
  "Loop Reverse",
  "Play Once Forward",
  "Play Once Reverse",
  "Stop",
  "Pause",
  "Bounce (Ping-Pong)",
  "Take Over Frame",
  "Loop Forward with pause on zero intensity",
  "Loop Reverse with pause on zero intensity",
  "Play Once Forward with pause on zero intensity",
  "Play Once Reverse with pause on zero intensity",
  "Bounce (Ping-Pong) with pause on zero intensity",
  "Synchronise to Time code",
  "Loop Forward with re-trigger on intensity",
  "Loop Reverse with re-trigger on intensity",
  "Play Once Forward with re-trigger on intensity",
  "Play Once Reverse with re-trigger on intensity",
  "Bounce with re-trigger on intensity"
}

local play_mode_values = {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  20,
  40,
  41,
  42,
  43,
  45
}

local transition_mode_keys = {
  "Alpha",
  "Additive",
  "Multiply",
  "Difference",
  "Screen",
  "Preserve Luma",
  "Rectangle Wipe",
  "Triangle Wipe",
  "Minimum",
  "Maximum",
  "Subtract",
  "Darken",
  "Lighten",
  "Soft Lighten",
  "Dark Lighten",
  "Exclusion",
  "Random",
  "Ripple",
  "Threshold",
  "Sine",
  "Invert Mask",
  "Noise",
  "Swirl",
  "Gradient",
  "Pixel Sort",
  "Checkerboard",
  "Pulse",
  "Hue Shift",
  "Fractal",
  "Waveform",
  "RGB Split",
  "Glitch"
}

local transition_mode_values = {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31
}

local framing_mode_keys = {
  "Letterbox",
  "Crop",
  "Stretch",
  "Multi Letterbox",
  "Centered"
}

local framing_mode_values = {
  0,
  1,
  2,
  3,
  4
}

local blend_mode_keys = {
  "Alpha",
  "Additive",
  "Multiply",
  "Difference",
  "Screen",
  "Preserve Luma",
  "Rectangle Wipe",
  "Triangle Wipe"
}

local blend_mode_values = {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7
}

local fx_list = {
  ["NONE"] = 0,
  ["OLD TV"] = 1,
  ["SEPIA"] = 2,
  ["FEEDBACK"] = 3,
  ["BLUR"] = 4,
  ["CRYSTALISE"] = 5,
  ["FRACTAL SOUP"] = 6,
  ["RADAR"] = 7,
  ["PIXELISE"] = 8,
  ["SOFT EDGE OVAL"] = 9,
  ["TILE"] = 10,
  ["INFINITY ZOOM"] = 11,
  ["DOT GRID"] = 12,
  ["KALEIDOSCOPE"] = 13,
  ["MULTI MIRROR"] = 14,
  ["REBELLE DISTORT"] = 15
}

local fXParameters = {
  fx = {
    {
      effectName = "0 - NONE",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "1 - OLD TV",
      param = {
        {paramName = "X POSITION"},
        {paramName = "Y POSITION"},
        {paramName = "X SCALE"},
        {paramName = "Y SCALE"},
        {paramName = "SATURATION"},
        {paramName = "CONTRAST"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "2 - SEPIA",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "3 - FEEDBACK",
      param = {
        {paramName = "AMOUNT"},
        {paramName = "SCALE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "4 - BLUR",
      param = {
        {paramName = "AMOUNT"},
        {paramName = "QUALITY"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "5 - CRYSTALISE",
      param = {
        {paramName = "CRYSTAL SIZE"},
        {paramName = "SPEED"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "6 - FRACTAL SOUP",
      param = {
        {paramName = "HUE"},
        {paramName = "SATURATION"},
        {paramName = "BRIGHTNESS"},
        {paramName = "SPEED"},
        {paramName = "MODE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "7 - RADAR",
      param = {
        {paramName = "SPEED"},
        {paramName = "X POSITION"},
        {paramName = "Y POSITION"},
        {paramName = "SCALE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "8 - PIXELISE",
      param = {
        {paramName = "PIXELATION"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "9 - SOFT EDGE OVAL",
      param = {
        {paramName = "X POSITION"},
        {paramName = "Y POSITION"},
        {paramName = "SIZE X"},
        {paramName = "SIZE Y"},
        {paramName = "SOFTNESS"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "10 - TILE",
      param = {
        {paramName = "HORIZONTAL"},
        {paramName = "VERTICAL"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "11 - INFINITY ZOOM",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "12 - DOT GRID",
      param = {
        {paramName = "AMOUNT"},
        {paramName = "DOT SIZE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "13 - KALEIDOSCOPE",
      param = {
        {paramName = "DIVISIONS"},
        {paramName = "ROTATION"},
        {paramName = "ZOOM"},
        {paramName = "X POSITION"},
        {paramName = "Y POSITION"},
        {paramName = "IN ANGLE"},
        {paramName = "ROTATE SPD"},
        {paramName = "X POS SPD"},
        {paramName = "Y POS SPD"},
        {paramName = "IN ANGLE SPD"},
        {paramName = "X POS QTY"},
        {paramName = "Y POS QTY"},
        {paramName = "IN ANGLE QTY"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "14 - MULTI MIRROR",
      param = {
        {paramName = "X POSITION"},
        {paramName = "Y POSITION"},
        {paramName = "X OFFSET"},
        {paramName = "Y OFFSET"},
        {paramName = "X MIRROR"},
        {paramName = "Y MIRROR"},
        {paramName = "ROTATE HI"},
        {paramName = "ROTATE LO"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "15 - REBELLE DISTORT",
      param = {
        {paramName = "SCAN LINES"},
        {paramName = "NOISE"},
        {paramName = "STATIC"},
        {paramName = "FUZZ"},
        {paramName = "RGB"},
        {paramName = "SCAN OPTION"},
        {paramName = "JERK"},
        {paramName = "MOVE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "16 - 4 POINT WARP",
      param = {
        {paramName = "TOP LEFT X"},
        {paramName = "TOP LEFT Y"},
        {paramName = "TOP RIGHT X"},
        {paramName = "TOP RIGHT Y"},
        {paramName = "BOTTOM RIGHT X"},
        {paramName = "BOTTOM RIGHT Y"},
        {paramName = "BOTTOM LEFT X"},
        {paramName = "BOTTOM LEFT Y"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "17 - HALF TONE",
      param = {
        {paramName = "AMOUNT"},
        {paramName = "ANGLE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "18 - HALF TONE INV",
      param = {
        {paramName = "AMOUNT"},
        {paramName = "ANGLE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "19 - HALF TONE COL",
      param = {
        {paramName = "AMOUNT"},
        {paramName = "ANGLE"},
        {paramName = "OFFSET"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "20 - HALF TONE SMP",
      param = {
        {paramName = "AMOUNT"},
        {paramName = "ANGLE"},
        {paramName = "OFFSET"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "21 - SWIRL DISTORT",
      param = {
        {paramName = "NOISE"},
        {paramName = "SWIRL"},
        {paramName = "TONE"},
        {paramName = "ROTATE SPD"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "22 - GLITCH SPLIT",
      param = {
        {paramName = "GLITCH"},
        {paramName = "SPLIT"},
        {paramName = "STROBE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "23 - BURN MELT NOISE",
      param = {
        {paramName = "BURN"},
        {paramName = "MELT"},
        {paramName = "NOISE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "24 - SHATTER",
      param = {
        {paramName = "CRACK"},
        {paramName = "SHATTER"},
        {paramName = "SIZE"},
        {paramName = "ANIM SPEED"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "25 - MULTI NOISE",
      param = {
        {paramName = "NOISE 1"},
        {paramName = "NOISE 2"},
        {paramName = "CONTRAST"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "26 - KALEIDO POP",
      param = {
        {paramName = "GLOW"},
        {paramName = "KALEIDOSCOPE"},
        {paramName = "SPARKLE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "27 - PRISM MIRAGE",
      param = {
        {paramName = "GLOW"},
        {paramName = "CHROMA"},
        {paramName = "REFRACT"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "28 - BLOCK PRISM",
      param = {
        {paramName = "BLOCK SIZE"},
        {paramName = "CHROMA"},
        {paramName = "BLOCK JUMBLE"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "29 - SQUARE CLOUD",
      param = {
        {paramName = "SATURATION"},
        {paramName = "MULTIPLY"},
        {paramName = "GLOW"},
        {paramName = "SPEED"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "30 - CIRCLE PARTY",
      param = {
        {paramName = "CIRCLE COUNT"},
        {paramName = "GLOW"},
        {paramName = "ROT SPEED"},
        {paramName = "TINT"},
        {paramName = "CIRCLE SIZE"},
        {paramName = "RING COUNT"},
        {paramName = "PHASE"},
        {paramName = "SPACING"},
        {paramName = "OFFSET"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "31 - EQ TUNNEL",
      param = {
        {paramName = "SPEED"},
        {paramName = "EQ POINTS"},
        {paramName = "ROTATE SPEED"},
        {paramName = "EQ MOTION"},
        {paramName = "SATURATION"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "32 - ELECTRO PATTERN",
      param = {
        {paramName = "SPEED"},
        {paramName = "ITERATIONS"},
        {paramName = "ZOOM"},
        {paramName = "ROTATION SPEED"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "33 - 4 POINT MASK",
      param = {
        {paramName = "TOP LEFT X"},
        {paramName = "TOP LEFT Y"},
        {paramName = "TOP RIGHT X"},
        {paramName = "TOP RIGHT Y"},
        {paramName = "BOTTOM RIGHT X"},
        {paramName = "BOTTOM RIGHT Y"},
        {paramName = "BOTTOM LEFT X"},
        {paramName = "BOTTOM LEFT Y"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "34 - 8 POINT MASK",
      param = {
        {paramName = "P1 X"},
        {paramName = "P1 Y"},
        {paramName = "P2 X"},
        {paramName = "P2 Y"},
        {paramName = "P3 X"},
        {paramName = "P3 Y"},
        {paramName = "P4 X"},
        {paramName = "P4 Y"},
        {paramName = "P5 X"},
        {paramName = "P5 Y"},
        {paramName = "P6 X"},
        {paramName = "P6 Y"},
        {paramName = "P7 X"},
        {paramName = "P7 Y"},
        {paramName = "P8 X"},
        {paramName = "P8 Y"}
      }
    },
    {
      effectName = "35 - Effect 35",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "36 - Effect 36",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "37 - Effect 37",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "38 - Effect 38",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "39 - Effect 39",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    },
    {
      effectName = "40 - Effect 40",
      param = {
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"},
        {paramName = "-"}
      }
    }
  }
}

local fx_choices = {}
for k, v in pairs(fx_list) do
  table.insert(fx_choices, k)
end

ticker = 1
poll_parameter_list = {}
for _, v in pairs(parameter_list) do
  if v ~= "Time Elapsed" and v ~= "Duration" and v ~= "Seek" then
    table.insert(poll_parameter_list, v:upper())
  end
end

local ip_address = Properties["IP Address"].Value

function get_table_key(tblKeys, tblValues, value)
  for i = 1, #tblValues do
    if tblValues[i] == value then
      return tblKeys[i]
    end
  end
  return nil
end

function get_table_value(tblKeys, tblValues, key)
  for i = 1, #tblKeys do
    if tblKeys[i] == key then
      return tblValues[i]
    end
  end
  return nil
end
rapidjson = require("rapidjson")

ws = WebSocket.New()
local wsConnected = false
local sequenceNo = 0
local pendingCallbacks = {}
local pendingRawCallbacks = {}
local refreshViewMap = {}
local handlers = {}
local connectionCallback = nil
local pingTimer = Timer.New()
local ipTarget = nil
local shouldConnect = false
local dataBuffer = "" -- Buffer to hold incoming data

function Connect(ip, statusCallback)
  connectionCallback = statusCallback
  shouldConnect = true
  ipTarget = ip
  if (ipTarget) then
    print("Connecting to Hive WebSocket at " .. ipTarget)
    connectSocket(ipTarget)
  else
    print("No IP address provided for WebSocket connection.")
  end
end

function Disconnect()
  shouldConnect = false
  ws:Close()
  wsConnected = false
  print("WebSocket connection closed")
  if connectionCallback then
    connectionCallback(false) -- Call the status callback with false to indicate disconnection
  end
  pingTimer:Stop()
end

-- WebSocket event handlers
ws.Connected = function()
  wsConnected = true
  print("WebSocket connection established")
  if connectionCallback then
    connectionCallback(true) -- Call the status callback with true to indicate success
  end
  -- send ping every 10 seconds to keep connection alive
  pingTimer:Start(10)
end

ws.Closed = function()
  wsConnected = false
  print("WebSocket connection closed")
  if connectionCallback then
    connectionCallback(false) -- Call the status callback with false to indicate disconnection
  end
  pingTimer:Stop()
  if shouldConnect then
    if ipTarget then
      connectSocket(ipTarget) -- Attempt to reconnect
    else
      print("No IP address provided for reconnection.")
    end
  end
end

ws.Data = function(ws, data)
  -- Check if the data is a complete message or part of a larger message
  if (string.len(data) == 16384) then
    dataBuffer = dataBuffer .. data
  else
    -- data is complete, let's process it
    dataBuffer = dataBuffer .. data
    local response = rapidjson.decode(dataBuffer)
    local callback = nil
    -- check if we have a local handler that matches the response name
    if response and response.apiVersion == 1 and response.name and handlers[response.name] then
      -- check if we have a defined handler for this data
      callback = handlers[response.name]
      if callback then
        -- Call the handler with the response data
        callback(response.ret)
      end
    elseif response and response.apiVersion == 1 and response.sequence and pendingCallbacks[response.sequence] then
      callback = pendingCallbacks[response.sequence]
      if callback then
        -- Call the callback with the response data
        callback(response.args.Path, response.ret.Value)
        -- remove the callback from pendingCallbacks after it's called
        pendingCallbacks[response.sequence] = nil
      end
    elseif response and response.apiVersion == 1 and response.sequence and pendingRawCallbacks[response.sequence] then
      callback = pendingRawCallbacks[response.sequence]
      if callback then
        -- Call the callback with the response data
        callback(response.args.Path, dataBuffer)
        -- remove the callback from pendingCallbacks after it's called
        pendingRawCallbacks[response.sequence] = nil
      end
    else
      print("No callback / handler found for data: ")
    end
    dataBuffer = "" -- Clear the buffer after processing
  end
end

ws.Error = function(socket, err)
  print("Hive WebSocket error: " .. err)
  pingTimer:Stop()
  -- Attempt to reconnect if the connection is lost
  if wsConnected == false and shouldConnect == true then
    if ipTarget then
      connectSocket(ipTarget) -- Attempt to reconnect
    end
  end
end

-- Timer to send ping messages to keep the WebSocket connection alive
pingTimer.EventHandler = function()
  ws:Ping()
end

function connectSocket(ip)
  -- Check if the WebSocket is already connected
  if (wsConnected) then
    print("WebSocket is already connected.")
    ws:Close()
  end
  -- Connect to the Hive WebSocket server
  ws:Connect("ws", ip, "", 9002)
end

function refreshView(refreshViewMessage)
  local callback = refreshViewMap[refreshViewMessage.Path]
  if callback then
    callback(refreshViewMessage.Path, refreshViewMessage.Value)
  else
    print("No callback found for refresh view message: " .. refreshViewMessage)
  end
end

handlers["RefreshView"] = refreshView

function _RemoveWatch(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_RemoveWatch",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function removeWatch(path)
  if path then
    refreshViewMap[path] = nil
    _RemoveWatch(path)
    print("Removed watch for path: " .. path)
  end
end

function getPatchDouble(path, callback)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchDouble",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    pendingCallbacks[sequenceNo] = callback
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function setPatchDouble(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchDouble",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function _WatchPatchDouble(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchDouble",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function watchPatchDouble(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchDouble(path)
  getPatchDouble(path, callback)
end

function getPatchString(path, callback)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchString",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    pendingCallbacks[sequenceNo] = callback
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function setPatchString(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchString",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function _WatchPatchString(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchString",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function watchPatchString(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchString(path)
  getPatchString(path, callback)
end

function getPatchJSON(path, callback, raw)
  if (wsConnected) then
    -- Increment the sequence number for each request
    sequenceNo = sequenceNo + 1
    if sequenceNo > 99999 then
      sequenceNo = 1 -- Reset sequence number if it exceeds 99999
    end
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "GetPatchJSON",
      args = {Path = path},
      sequence = sequenceNo
    }
    -- Store the callback for later use
    if raw then
      pendingRawCallbacks[sequenceNo] = callback
    else
      pendingCallbacks[sequenceNo] = callback
    end
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function setPatchJSON(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "UpdatePatchJSON",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function updatePatchJSON(path, value)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "SetPatchJSON",
      args = {Path = path, Value = value}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function _WatchPatchJSON(path)
  if (wsConnected) then
    -- Create the request object
    local request = {
      apiVersion = 1,
      name = "_WatchPatchJSON",
      args = {Path = path}
    }
    -- Send the request over the WebSocket
    ws:Write(rapidjson.encode(request), false)
  end
end

function watchPatchJSON(path, callback)
  refreshViewMap[path] = callback
  _WatchPatchJSON(path)
  getPatchJSON(path, callback)
end
---checks if a string represents an ip address
function isIpAddress(ip)
  if not ip then
    return false
  end
  local a, b, c, d = ip:match("^(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)%.(%d%d?%d?)$")
  a = tonumber(a)
  b = tonumber(b)
  c = tonumber(c)
  d = tonumber(d)
  if not a or not b or not c or not d then
    return false
  end
  if a < 0 or 255 < a then
    return false
  end
  if b < 0 or 255 < b then
    return false
  end
  if c < 0 or 255 < c then
    return false
  end
  if d < 0 or 255 < d then
    return false
  end
  return true
end

function fn_hive_connect_Status(status)
  if status == true then
    Controls.online.Boolean = true
    fn_watch_parameters()
  else
    Controls.online.Boolean = false
  end
end

function fn_watch_parameters()
  -- Watch for JSON updates
  watchPatchJSON("/System Settings", processJSONUpdate)
  watchPatchJSON("/Media List", processJSONUpdate)
  -- get the LUT options and update controls
  -- set the RAW mode so we can parse the raw data manually
  getPatchJSON("/LUT Colour Modes", processLUTData, true)
  -- Watch for value changes in layer parameters
  for i = 1, layer_count do
    for _, parameter in ipairs(poll_parameter_list) do
      local path = string.format("/LAYER %s/%s/Value", i, parameter)
      watchPatchDouble(path, processDoubleUpdate)
    end
  end
  -- Watch for value changes in transport control parameters
  for i = 1, layer_count do
    watchPatchDouble(string.format("/LAYER %s/Transport Control/Media Time/Value", i), processDoubleUpdate)
  end
end

function fn_send(layer, cmd, val)
  local path = "/LAYER " .. layer .. "/" .. cmd .. "/Value" -- please make this neater with string.format()
  setPatchDouble(path, val)
end

function fn_send_json(cmd, val)
  local encoded_val = json.encode(val)
  local path = "/" .. cmd
  sePatchJSON(path, encoded_val)
end

function processLUTData(path, data)
  -- The LUT list is inside a JSON object under the "Value" key
  -- however it is not indexed so we have to extract the string pairs manually
  -- in order to maintain the ordering
  -- this is a bit hacky but it works

  -- find the start of the "Value" object
  local startPos = data:find('"Value"%s*:%s*{')
  if startPos then
    -- extract substring from "Value": { ... }
    local subStr = data:sub(startPos)
    -- stop at the matching closing brace for Value
    local braceCount, endPos = 0, nil
    for i = 1, #subStr do
      local c = subStr:sub(i, i)
      if c == "{" then
        braceCount = braceCount + 1
      elseif c == "}" then
        braceCount = braceCount - 1
        if braceCount == 0 then
          endPos = i
          break
        end
      end
    end
    if endPos then
      lut_list = {
        ["NONE"] = 0
      }
      lut_choices = {}
      local idx = 1
      table.insert(lut_choices, "NONE") -- Add "NONE" option
      local valueBlock = subStr:sub(1, endPos)
      -- now extract all keys inside "Value"
      for k in valueBlock:gmatch('"([^"]+)"%s*:') do
        if k ~= "Value" then
          table.insert(lut_choices, k)
          lut_list[k] = idx
          idx = idx + 1
        end
      end
      for i = 1, layer_count do
        Controls["lut_" .. i].Choices = lut_choices
      end
    end
  end
end

function processDoubleUpdate(path, value)
  if path:sub(1, 6) == "/LAYER" then -- Layer parameter response
    local layer, parameter = path:match("/LAYER (%d+)/(%P+)/Value")
    if parameter then
      local control = string.format("%s_%s", parameter:gsub("%s", "_"):lower(), layer)
      if parameter == "FILE SELECT" then
        for k, v in pairs(file_list) do
          if v == value then
            Controls[control].String = k
            Controls["duration_" .. control:sub(-1, -1)].String =
              os.date("!%X", math.floor(file_metadata_list[k].duration))
            for media = 1, media_item_count do
              Controls[string.format("media_thumbnail_%s_layer_%s", media, layer)].Boolean =
                Controls[control].String == Controls[string.format("media_name_%s_layer_%s", media, layer)].String
            end
            break
          end
        end
      elseif parameter == "FOLDER SELECT" then
        for k, v in pairs(folder_list) do
          if v == value then
            Controls[control].String = k
            break
          end
        end
      elseif parameter == "LUT" then
        for k, v in pairs(lut_list) do
          if v == value then
            Controls[control].String = k
            break
          end
        end
      elseif parameter:sub(-5, -1) == "FRAME" then
        Controls[control].Value = value
      elseif parameter == "PLAY MODE" then
        local key = get_table_key(play_mode_keys, play_mode_values, value)
        Controls[control].String = key
      elseif parameter == "FRAMING MODE" then
        local key = get_table_key(framing_mode_keys, framing_mode_values, value)
        Controls[control].String = key
      elseif parameter == "BLEND MODE" then
        local key = get_table_key(blend_mode_keys, blend_mode_values, value)
        Controls[control].String = key
      elseif parameter == "TRANSITION MODE" then
        local key = get_table_key(transition_mode_keys, transition_mode_values, value)
        Controls[control].String = key
      elseif parameter == "PLAY SPEED" or parameter == "SCALE" then
        if value >= 0.5 then
          Controls[control].Position = (value - 0.4444444444444444) / 0.5555555555555556
        else
          Controls[control].Position = value / 5
        end
      elseif parameter:sub(1, 3) == "MTC" then
        Controls[control].Value = value
      elseif parameter:sub(1, 8) == "POSITION" then
        Controls[control].Value = (value * 200) - 100
      elseif parameter:sub(1, 8) == "ROTATION" then
        Controls[control].Value = (value * 2880) - 1440
      elseif parameter:sub(1, 19) == "TRANSITION DURATION" then
        Controls[control].Value = value
      elseif
        parameter == "RED" or parameter == "BLUE" or parameter == "GREEN" or parameter == "SATURATION" or
          parameter == "CONTRAST"
       then
        Controls[control].Value = (value * 200) - 100
      else -- parameters where data directly proportional to position
        Controls[control].Position = value
      end
    else
      local layer, parameter = path:match("/LAYER (%d+)/(%P+)")
      if parameter == "Transport Control" then
        local layer, parameter, sub_parameter = path:match("/LAYER (%d+)/(%P+)/(%P+)")
        if sub_parameter == "Media Time" then
          if Controls["file_select_" .. layer].String ~= "" and not seek_timer_list[tonumber(layer)]:IsRunning() then
            if file_metadata_list[Controls["file_select_" .. layer].String].duration == 0 then
              Controls["seek_" .. layer].Position = 0
              Controls["time_elapsed_" .. layer].String = os.date("!%X", 0)
            else
              local pos = tonumber(value) / file_metadata_list[Controls["file_select_" .. layer].String].duration
              Controls["seek_" .. layer].Position = pos
              Controls["time_elapsed_" .. layer].String = os.date("!%X", math.floor(value))
            end
          end
        end
      end
    end
  end
end
---- Helper function to split a string using a seperator
function stringsplit(inputstr, sep)
  -- if sep is null, set it as space
  if sep == nil then
    sep = "%s"
  end
  -- define an array
  local t = {}
  -- split string based on sep
  for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
    -- insert the substring in table
    table.insert(t, str)
  end
  -- return the array
  return t
end

function processJSONUpdate(path, value)
  if path == "/System Settings" then
    Controls.ip_address.String = value.ipAddress
    Controls.device_name.String = value.deviceName
  elseif path == "/Media List" then
    local file_choice_list = {}
    for _, file in ipairs(value.files) do
      file_list[file.name] = file.fileIndex - 1
      table.insert(file_choice_list, file.name)
      file_metadata_list[file.name] = file
      for i = 1, layer_count do
        if Controls[string.format("media_name_%s_layer_%s", file.fileIndex, i)] then
          Controls[string.format("media_name_%s_layer_%s", file.fileIndex, i)].String = file.name
        end
      end
      get_file_thumbnail(file.fileIndex, file.name)
    end
    for i = 1, layer_count do
      Controls["file_select_" .. i].Choices = file_choice_list
    end
  elseif path == "/Output Mapping" then
  elseif path == "/Play List" then
  elseif path == "/Timecode Cue List" then
  elseif path == "/Vioso WB Settings" then
  elseif path == "/Screenberry WB Settings" then
  end
end

--[[
function get_live_preview()
  HttpClient.Download {
    Url = string.format("http://%s/Honey/status.txt", ip_address),
    Headers = {},
    Auth = "basic",
    Timeout = 10,
    EventHandler = function(table, code, data, err, headers)
      print(string.format("http://%s/Honey/outputFrame_%s.jpg", ip_address, data))
      HttpClient.Download {
        Url = string.format("http://%s/Honey/outputFrame_%s.jpg", ip_address, data),
        Headers = {},
        Auth = "basic",
        Timeout = 10,
        EventHandler = function(table, code, data, err, headers)
          print(base_uri, code, data, err, headers)
          local iconStyle = {
            DrawChrome = true,
            HorizontalAlignment = "Center",
            Legend = "",
            Padding = 0,
            Margin = 0,
            IconData = Qlib.base64_enc(data)
          }
          Controls.thumbnail.Style = rapidjson.encode(iconStyle)
        end
      }
    end
  }
end
]]
function get_file_thumbnail(index, filename)
  if index <= media_item_count then
    HttpClient.Download {
      Url = string.format("http://%s/Thumbs/%s", ip_address, filename:gsub("%.%w+", ".jpg")),
      Headers = {},
      Auth = "basic",
      Timeout = 10,
      EventHandler = function(tbl, code, data, err, headers)
        if code == 200 then
          local iconStyle = {
            DrawChrome = true,
            HorizontalAlignment = "Center",
            Legend = "",
            Padding = 0,
            Margin = 0,
            IconData = Qlib.base64_enc(data)
          }
          for i = 1, layer_count do
            Controls[string.format("media_thumbnail_%s_layer_%s", index, i)].Style = rapidjson.encode(iconStyle)
          end
        end
      end
    }
  end
end

function updateMediaFolders()
  url = string.format("http://%s/api/getMediaFoldersList", ip_address)
  HttpClient.Post {
    Url = url,
    Data = rapidjson.encode({}), -- This can be anything
    Headers = {
      ["Content-Type"] = "application/json"
    },
    EventHandler = function(tbl, code, data, error, headers)
      if code == 200 then
        local folders = rapidjson.decode(data)
        folder_list = {
          ["MEDIA"] = 0 -- Default folder
        }
        local index = 1
        for _, folder in pairs(folders.folders) do
          folder_list[folder] = index
          index = index + 1
        end
        folder_choices = {}
        for k, v in pairs(folder_list) do
          table.insert(folder_choices, k)
        end
        for i = 1, layer_count do
          Controls["folder_select_" .. i].Choices = folder_choices
        end
      end
    end
  }
end
-- Layer Parameters

function cmd_file_select(layer, x) -- 0..65535: File Select
  if file_metadata_list[Controls["file_select_" .. layer].String] then
    Controls["duration_" .. layer].String =
      os.date("!%X", math.floor(file_metadata_list[Controls["file_select_" .. layer].String].duration))
    fn_send(layer, "FILE SELECT", x)
  end
end

function cmd_folder_select(layer, x) -- 0..65535: File Select
  fn_send(layer, "FOLDER SELECT", x)
end

function cmd_intensity(layer, x)
  fn_send(layer, "INTENSITY", x)
end

function cmd_in_frame(layer, x)
  fn_send(layer, "IN FRAME", x)
end

function cmd_out_frame(layer, x)
  fn_send(layer, "OUT FRAME", x)
end

function cmd_play_mode(layer, x)
  fn_send(layer, "PLAY MODE", x)
end

function cmd_framing(layer, x)
  fn_send(layer, "FRAMING MODE", x)
end

function cmd_blend_mode(layer, x)
  fn_send(layer, "BLEND MODE", x)
end

function cmd_lut_select(layer, x)
  fn_send(layer, "LUT", x)
end

function cmd_play_speed(layer, x)
  fn_send(layer, "PLAY SPEED", x)
end

function cmd_movement_speed(layer, x) -- reserved for future use
  fn_send(layer, "MOVEMENT SPEED", x)
end

function cmd_tc_hour(layer, x)
  fn_send(layer, "MTC HOUR", x)
end

function cmd_tc_minute(layer, x)
  fn_send(layer, "MTC MINUTE", x)
end

function cmd_tc_second(layer, x)
  fn_send(layer, "MTC SECOND", x)
end

function cmd_tc_frame(layer, x)
  fn_send(layer, "MTC FRAME", x)
end

function cmd_scale(layer, x)
  fn_send(layer, "SCALE", x)
end

function cmd_aspect_ratio(layer, x)
  fn_send(layer, "ASPECT RATIO", x)
end

function cmd_position_x(layer, x)
  fn_send(layer, "POSITION X", x)
end

function cmd_position_y(layer, x)
  fn_send(layer, "POSITION Y", x)
end

function cmd_rotation_x(layer, x)
  fn_send(layer, "ROTATION X", x)
end

function cmd_rotation_y(layer, x)
  fn_send(layer, "ROTATION Y", x)
end

function cmd_rotation_z(layer, x)
  fn_send(layer, "ROTATION Z", x)
end

function cmd_red(layer, x)
  fn_send(layer, "RED", x)
end

function cmd_green(layer, x)
  fn_send(layer, "GREEN", x)
end

function cmd_blue(layer, x)
  fn_send(layer, "BLUE", x)
end

function cmd_hue(layer, x)
  fn_send(layer, "HUE", x)
end

function cmd_saturation(layer, x)
  fn_send(layer, "SATURATION", x)
end

function cmd_contrast(layer, x)
  fn_send(layer, "CONTRAST", x)
end

function cmd_strobe(layer, x)
  fn_send(layer, "STROBE", x)
end

function cmd_volume(layer, x)
  fn_send(layer, "VOLUME", x)
end

function cmd_transition_duration(layer, x)
  fn_send(layer, "TRANSITION DURATION", x)
end

function cmd_transition_mode(layer, x)
  fn_send(layer, "TRANSITION MODE", x)
end

for i = 1, 2 do -- NO IDEA IF THIS WORKS! PLEASE TEST!!
  _G["cmd_fx" .. i .. "_select"] = function(layer, x)
    fn_send(layer, "FX" .. i .. " SELECT", x)
  end
  _G["cmd_fx" .. i .. "_opacity"] = function(layer, x)
    fn_send(layer, "FX" .. i .. " OPACITY", x)
  end
  for p = 1, 16 do
    _G["cmd_fx" .. i .. "_parameter_" .. p] = function(layer, x)
      fn_send(layer, "FX" .. i .. " PARAM " .. p, x)
    end
  end
end

for layer, seek_timer in pairs(seek_timer_list) do
  seek_timer.EventHandler = function(timer)
    if Controls[string.format("seek_%s", layer)].String == seek_last_value[layer] then
      if Controls["file_select_" .. layer].String ~= "" then
        local frame =
          math.floor(
          file_metadata_list[Controls["file_select_" .. layer].String].duration *
            file_metadata_list[Controls["file_select_" .. layer].String].rate *
            Controls["seek_" .. layer].Position
        )
        -- Seek to desired frame
        local path = string.format("/LAYER %s/Transport Control/MediaClockGenerator/Seek", layer)
        setPatchDouble(path, frame)
      end
      seek_timer_list[layer]:Stop()
    end
    seek_last_value[layer] = Controls[string.format("seek_%s", layer)].String
  end
end

-- Define Control EventHandlers
Controls["test"].EventHandler = function()
  if (Controls["test"].Value == 1) then
    print("Test button pressed!")
    -- Example of sending a command
    Connect(Properties["IP Address"].Value)
  end
end

for i = 1, layer_count do
  Controls["file_select_" .. i].EventHandler = function()
    cmd_file_select(i, file_list[Controls["file_select_" .. i].String])
  end
  Controls["folder_select_" .. i].EventHandler = function()
    cmd_folder_select(i, folder_list[Controls["folder_select_" .. i].String])
  end
  Controls["intensity_" .. i].EventHandler = function()
    cmd_intensity(i, Controls["intensity_" .. i].Position)
  end
  Controls["in_frame_" .. i].EventHandler = function()
    cmd_in_frame(i, Controls["in_frame_" .. i].Value)
  end
  Controls["out_frame_" .. i].EventHandler = function()
    cmd_out_frame(i, Controls["out_frame_" .. i].Value)
  end
  Controls["play_mode_" .. i].EventHandler = function()
    local val = get_table_value(play_mode_keys, play_mode_values, Controls["play_mode_" .. i].String)
    cmd_play_mode(i, val)
  end
  Controls["framing_mode_" .. i].EventHandler = function()
    local val = get_table_value(framing_mode_keys, framing_mode_values, Controls["framing_mode_" .. i].String)
    cmd_framing(i, val)
  end
  Controls["blend_mode_" .. i].EventHandler = function()
    local val = get_table_value(blend_mode_keys, blend_mode_values, Controls["blend_mode_" .. i].String)
    cmd_blend_mode(i, val)
  end
  Controls["lut_" .. i].EventHandler = function()
    cmd_lut_select(i, lut_list[Controls["lut_" .. i].String])
  end
  Controls["play_speed_" .. i].EventHandler = function()
    local converted_value = Controls["play_speed_" .. i].Position
    if Controls["play_speed_" .. i].Position >= 0.1 then
      converted_value = 0.5555555555555556 * Controls["play_speed_" .. i].Position + 0.4444444444444444
    else
      converted_value = 5 * Controls["play_speed_" .. i].Position
    end
    cmd_play_speed(i, converted_value)
  end
  Controls["move_speed_" .. i].EventHandler = function()
    -- reserved for future use
    cmd_movement_speed(i, Controls["movement_speed_" .. i].Position)
  end
  Controls["mtc_hour_" .. i].EventHandler = function()
    cmd_tc_hour(i, Controls["mtc_hour_" .. i].Value)
  end
  Controls["mtc_minute_" .. i].EventHandler = function()
    cmd_tc_minute(i, Controls["mtc_minute_" .. i].Value)
  end
  Controls["mtc_second_" .. i].EventHandler = function()
    cmd_tc_second(i, Controls["mtc_second_" .. i].Value)
  end
  Controls["mtc_frame_" .. i].EventHandler = function()
    cmd_tc_frame(i, Controls["mtc_frame_" .. i].Value)
  end
  Controls["scale_" .. i].EventHandler = function()
    local converted_value = Controls["scale_" .. i].Position
    if Controls["scale_" .. i].Position >= 0.1 then
      converted_value = 0.5555555555555556 * Controls["scale_" .. i].Position + 0.4444444444444444
    else
      converted_value = 5 * Controls["scale_" .. i].Position
    end
    cmd_scale(i, converted_value)
  end
  Controls["aspect_ratio_" .. i].EventHandler = function()
    cmd_aspect_ratio(i, Controls["aspect_ratio_" .. i].Position)
  end
  Controls["position_x_" .. i].EventHandler = function()
    cmd_position_x(i, (Controls["position_x_" .. i].Value + 100) / 200)
  end
  Controls["position_y_" .. i].EventHandler = function()
    cmd_position_y(i, (Controls["position_y_" .. i].Value + 100) / 200)
  end
  Controls["rotation_x_" .. i].EventHandler = function()
    cmd_rotation_x(i, (Controls["rotation_x_" .. i].Value + 1440) / 2880)
  end
  Controls["rotation_y_" .. i].EventHandler = function()
    cmd_rotation_y(i, (Controls["rotation_y_" .. i].Value + 1440) / 2880)
  end
  Controls["rotation_z_" .. i].EventHandler = function()
    cmd_rotation_z(i, (Controls["rotation_z_" .. i].Value + 1440) / 2880)
  end
  Controls["red_" .. i].EventHandler = function()
    cmd_red(i, (Controls["red_" .. i].Value + 100) / 200)
  end
  Controls["green_" .. i].EventHandler = function()
    cmd_green(i, (Controls["green_" .. i].Value + 100) / 200)
  end
  Controls["blue_" .. i].EventHandler = function()
    cmd_blue(i, (Controls["blue_" .. i].Value + 100) / 200)
  end
  Controls["hue_" .. i].EventHandler = function()
    cmd_hue(i, Controls["hue_" .. i].Position)
  end
  Controls["saturation_" .. i].EventHandler = function()
    cmd_saturation(i, (Controls["saturation_" .. i].Value + 100) / 200)
  end
  Controls["contrast_" .. i].EventHandler = function()
    cmd_contrast(i, (Controls["contrast_" .. i].Value + 100) / 200)
  end
  Controls["strobe_" .. i].EventHandler = function()
    cmd_strobe(i, Controls["strobe_" .. i].Position)
  end
  Controls["volume_" .. i].EventHandler = function()
    cmd_volume(i, Controls["volume_" .. i].Position)
  end
  Controls["seek_" .. i].EventHandler = function()
    seek_timer_list[i]:Start(.2)
  end
  Controls["transition_duration_" .. i].EventHandler = function()
    cmd_transition_duration(i, Controls["transition_duration_" .. i].Value)
  end
  Controls["transition_mode_" .. i].EventHandler = function()
    local val = get_table_value(transition_mode_keys, transition_mode_values, Controls["transition_mode_" .. i].String)
    cmd_transition_mode(i, val)
  end

  for p = 1, media_item_count do
    Controls[string.format("media_thumbnail_%s_layer_%s", p, i)].EventHandler = function()
      if Controls[string.format("media_name_%s_layer_%s", p, i)].String ~= nil then
        cmd_file_select(i, file_list[Controls[string.format("media_name_%s_layer_%s", p, i)].String])
      end
    end
  end
  --TODO -- FX CONTROLS

  -- Choices
  Controls["play_mode_" .. i].Choices = play_mode_keys
  Controls["framing_mode_" .. i].Choices = framing_mode_keys
  Controls["blend_mode_" .. i].Choices = blend_mode_keys
  Controls["transition_mode_" .. i].Choices = transition_mode_keys
end

updateMediaFolders()

-- Connect
if isIpAddress(ip_address) then
  print("Connecting to Hive player at " .. ip_address)
  Connect(ip_address, fn_hive_connect_Status)
else
  print("Invalid IP address: " .. ip_address)
end
end
